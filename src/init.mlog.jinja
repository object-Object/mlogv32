# this processor initializes INCR using a lookup table, and sets readonly CSR values
# the lookup table must be linked first

    set LOOKUP_START 0
    set EXPECTED_LINKS 17
    set LOOKUP_PROC_SIZE 260
    set RAM_PROC_SIZE 4096

    # wait until ready
reset:
    jump reset lessThan @links EXPECTED_LINKS
    
    set INCR processor17
    read type INCR "_type"
    jump reset equal type "lookup" # sanity check

    set CSRS processor18

    op div wait LOOKUP_PROC_SIZE 120 # micro proc instructions/sec
    op ceil wait wait
    wait wait

    # initialize INCR

    setrate 1000

    set address 0
    op add ret @counter 1
    jump lookup_variable always
    set prev_variable variable

    set address 1
loop:
    set variable null
    op add ret @counter 1
    jump lookup_variable lessThan address RAM_PROC_SIZE

    write variable INCR prev_variable
    set prev_variable variable
    op add address address 1
    jump loop lessThanEq address RAM_PROC_SIZE

    # initialize CSRS

    # misa
    # XLEN=32 --
    # 0         ----
    # ISA           ZYXWVUTSRQPONMLKJIHGFEDCBA
    write   0b01000000100100000001000100000001 CSRS "{{ 'misa'|csr }}"

    # mstatush
    # WPRI  --------------------------  ----
    # MBE                             -
    # SBE                              -
    write 0b00000000000000000000000000000000 CSRS "{{ 'mstatush'|csr }}"

    # mlogv32 only has one hart, so mhartid is required to be zero
    write 0 CSRS "{{ 'mhartid'|csr }}"

    # unimplemented fields
    write 0 CSRS "{{ 'mvendorid'|csr }}"
    write 0 CSRS "{{ 'marchid'|csr }}"
    write 0 CSRS "{{ 'mimpid'|csr }}"

    stop

# given a value 0 <= address < RAM_PROC_SIZE, resolve that variable in the lookup table
# address -> variable
lookup_variable:
    op idiv _lookup address LOOKUP_PROC_SIZE
    op add _lookup _lookup LOOKUP_START
    getlink _lookup _lookup

    op mod variable address LOOKUP_PROC_SIZE
    lookup block variable variable
    sensor variable variable @name
    read variable _lookup variable

    set @counter ret
