#%# hack: use extends so we don't need to individually import all of the constants
#% extends 'main.constants.jinja'
#% block contents

# disable the power switch, then reset
halt:
    control enabled {{POWER_SWITCH}} false

# wait until the power switch is enabled, then reset/start
reset:
    set STATE "reset" # for debug output

    # load config
    read MEMORY_X {{CONFIG}} "MEMORY_X"
    read MEMORY_Y {{CONFIG}} "MEMORY_Y"
    read MEMORY_WIDTH {{CONFIG}} "MEMORY_WIDTH"
    read ROM_SIZE {{CONFIG}} "ROM_SIZE"
    read RAM_SIZE {{CONFIG}} "RAM_SIZE"
    read ICACHE_SIZE {{CONFIG}} "ICACHE_SIZE"
    read UART_FIFO_MODULO {{CONFIG}} "UART_FIFO_MODULO"

    op idiv RAM_START_PROC ROM_SIZE {{ROM_PROC_BYTES}}

    op add RAM_END {{RAM_START}} RAM_SIZE

    # loop until the power switch is linked and enabled
    sensor enabled {{POWER_SWITCH}} @enabled
    jump reset equal enabled false

    # load reloadable config options
    op add ret @counter 1
    jump reload_config always

    # initialize peripherals
    printflush {{ERROR_OUTPUT}}

    # reset time/cycle reference point
    set last_time_update @time
    set last_cycle_update @tick
    set next_time_update @time

    # reset icache
    set __etext 0

    # reset mtvec to implementation-defined value to help catch bugs
    write {{SYSCON}} {{CSRS}} "{{ 'mtvec'|csr }}"

    # reset hart state as per machine-level ISA

    # set privilege mode to M
    set privilege_mode 0b11

    # clear mstatus
    # technically we're only supposed to clear MPRV and MIE, but the other bits are explicitly unspecified, so this is allowed
    set mstatus 0
    write mstatus {{CSRS}} "{{ 'mstatus'|csr }}"
    
    # set pc to reset vector
    set pc 0
    set icache_var null

    # set mcause to 0, since we don't distinguish different reset conditions
    write 0 {{CSRS}} "{{ 'mcause'|csr }}"
    
    # clear LR/SC reservation set
    set reservation_set null

    set STATE "running"

main:
    jump main__skip_time_update lessThan @time next_time_update

    # update time
    # TODO: handle mtimeh/mcycleh overflow
    op sub delta_ms @time last_time_update

    op add mtime mtime delta_ms
    op floor mtime mtime

    op shr mtime_overflow mtime 32
    op add mtimeh mtimeh mtime_overflow

    op mod mtime mtime 0x100000000

    write mtime {{CSRS}} "{{ 'time'|csr }}"
    write mtimeh {{CSRS}} "{{ 'timeh'|csr }}"

    # update cycle
    # we define the rate of increase of cycle as "@ipt * ticks"
    # this should be a decent estimation of the number of mlog instructions executed
    op sub delta_cycles @tick last_cycle_update
    op mul delta_cycles delta_cycles @ipt

    op add mcycle mcycle delta_cycles
    op floor mcycle mcycle

    op shr mcycle_overflow mcycle 32
    op add mcycleh mcycleh mcycle_overflow

    op mod mcycle mcycle 0x100000000

    write mcycle {{CSRS}} "{{ 'mcycle'|csr }}"
    write mcycle {{CSRS}} "{{ 'cycle'|csr }}"
    write mcycleh {{CSRS}} "{{ 'mcycleh'|csr }}"
    write mcycleh {{CSRS}} "{{ 'cycleh'|csr }}"

    set last_time_update @time
    set last_cycle_update @tick
    op add next_time_update @time 1

    # check if interrupts should be pending
    # we do this in time_update because interrupts are either caused by mtime(h) incrementing or an external event
    # and time_update is effectively only called when the processor has crossed an IPT boundary
    
    # timer interrupt
    op greaterThan mtimeh_gt_mtimecmph mtimeh mtimecmph
    op equal mtimeh_eq_mtimecmph mtimeh mtimecmph
    op greaterThanEq mtime_ge_mtimecmp mtime mtimecmp

    op and mip.mtip mtimeh_eq_mtimecmph mtime_ge_mtimecmp
    op or mip.mtip mip.mtip mtimeh_gt_mtimecmph
    op shl mip.mtip mip.mtip 7

    read mip {{CSRS}} "{{ 'mip'|csr }}"
    op and mip mip 0b11111111111111111111111101111111
    op or mip mip mip.mtip
    write mip {{CSRS}} "{{ 'mip'|csr }}"

    # check if interrupts should fire

    jump main__interrupts_user_mode lessThan privilege_mode 0b11
    op and mstatus.mie mstatus 0b1000
    jump main__skip_interrupts equal mstatus.mie 0
main__interrupts_user_mode:

    # timer interrupt
    read mie {{CSRS}} "{{ 'mie'|csr }}"
    op and mie.mtie mie mip.mtip
    set mcause 0x80000007 # machine timer interrupt
    set mtval 0
    jump trap notEqual mie.mtie 0

main__skip_interrupts:
main__skip_time_update:

    set mtval pc

    # get the current instruction cache processor and variable
    jump main__read_icache notEqual icache_var null

    # fall back to slow instruction fetch/decode if not in valid icache range
    # note: MLOGSYS enforces __etext <= ICACHE_SIZE and __etext <= ROM_SIZE
    jump main__access_icache lessThan pc __etext
    jump main__slow_instruction_fetch lessThan pc ROM_SIZE
    jump main__access_icache lessThan pc ICACHE_SIZE

main__slow_instruction_fetch:
    jump default_mtvec_handler equal pc {{SYSCON}}

    set mcause 1 # instruction access fault
    jump trap greaterThanEq pc RAM_END # prevent executing from MMIO

    set address pc
    op add ret @counter 1
    jump load_word always

    set instruction result
    set decode_address null
    
    # IMPORTANT: remember to update this value if anything in access_icache or read_icache is changed
    op add decode_ret @counter 10
    jump decode always

main__access_icache:
    # the icache is stored in RAM cells immediately after the end of RAM with the same density as regular memory
    # icache address = RAM_END + pc = RAM_START + RAM_SIZE + pc
    # _address @ access_ram_raw = address - RAM_START
    #                           = RAM_START + RAM_SIZE + pc - RAM_START
    #                           = RAM_SIZE + pc
    # so just calculate that and skip the extra subtraction
    op add _address RAM_SIZE pc
    op add lookup_variable_ret @counter 1
    jump access_ram_raw always
    set icache_ram ram
    set icache_var variable

main__read_icache:
    # load instruction and unpack arguments
    read icache_payload icache_ram icache_var
    read icache_var {{INCR}} icache_var
    op and imm icache_payload 0xffffffff
    op shr op_id icache_payload 47
    # decode_ret jumps here for the slow path
    # we can't jump any later because decode doesn't fully isolate the register fields

    op shr rd_id icache_payload 32
    op and rd_id rd_id 0b11111
    
    op shr rs1_id icache_payload 37
    op and rs1_id rs1_id 0b11111
    
    op shr rs2_id icache_payload 42
    op and rs2_id rs2_id 0b11111

    # read rs1 and rs2
    # this wastes 1 cycle for I-type and 2 cycles for U-type and J-type, but it saves a huge amount of space
    read rs1 {{REGISTERS}} rs1_id
    read rs2 {{REGISTERS}} rs2_id
    
    # pause if in single-stepping mode, or if we hit the configured breakpoint
    sensor enabled {{SINGLE_STEP_SWITCH}} @enabled
    jump pause_step equal enabled true
    jump pause_step strictEqual pc BREAKPOINT_ADDRESS
done_pause_step:

    # jump to instruction handler
    # TODO: we could save space by using a symbol table, but that would make updating the code a pain
    op add jump op_id 64 # op_id is in the range [-64, 63]
    op add @counter @counter jump

    jump BEQ always
    jump BNE always
    jump JAL always
    jump JALR always
    jump BLT always
    jump BGE always
    jump BLTU always
    jump BGEU always
    jump LB always
    jump LH always
    jump LW always
    jump LUI always
    jump LBU always
    jump LHU always
    jump SB always
    jump SH always
    jump SW always
    jump AMOADD.W always
    jump AMOSWAP.W always
    jump LR.W always
    jump SC.W always
    jump AMOXOR.W always
    jump AMOOR.W always
    jump AMOAND.W always
    jump AMOMIN.W always
    jump AMOMAX.W always
    jump AMOMINU.W always
    jump AMOMAXU.W always
    jump ADDI always
    jump SUB always
    jump SLTI always
    jump SLTIU always
    jump XORI always
    jump SRA always
    jump ORI always
    jump ANDI always
    jump ADD always
    jump SLL always
    jump SLT always
    jump SLTU always
    jump XOR always
    jump SRL always
    jump OR always
    jump AND always
    jump MUL always
    jump MULH always
    jump MULHSU always
    jump MULHU always
    jump DIV always
    jump DIVU always
    jump REM always
    jump REMU always
    jump PRIV always
    jump CSRRW always
    jump CSRRS always
    jump CSRRC always
    jump AUIPC always
    jump CSRRWI always
    jump CSRRSI always
    jump CSRRCI always
    jump FENCE always
    jump SLLI always
    jump SRLI always
    jump SRAI always
    jump illegal_instruction always # null + 64 would jump here
    jump MLOGSYS always
    jump MLOGDRAW always

# we jump here after instruction fetch if the single-step switch is enabled or if we hit an address breakpoint
pause_step:
    control enabled {{PAUSE_SWITCH}} true
    control enabled {{SINGLE_STEP_SWITCH}} true

pause_step__loop:
    sensor enabled {{PAUSE_SWITCH}} @enabled
    jump pause_step__loop equal enabled true

    op add ret @counter 1
    jump reload_config always

    jump done_pause_step always

# most instructions with an output register jump here after completing successfully
# writes result to register rd_id if rd_id is not x0
end_instruction_with_result:
    jump end_instruction equal rd_id 0
    write result {{REGISTERS}} rd_id

# all instructions jump here after completing successfully
end_instruction:
    # increment instret
    op add minstret minstret 1
    jump end_instruction__no_overflow lessThan minstret 0x100000000

    set minstret 0

    op add minstreth minstreth 1
    write minstreth {{CSRS}} "{{ 'minstreth'|csr }}"
    write minstreth {{CSRS}} "{{ 'instreth'|csr }}"

end_instruction__no_overflow:
    write minstret {{CSRS}} "{{ 'minstret'|csr }}"
    write minstret {{CSRS}} "{{ 'instret'|csr }}"

    # if we're in the icache, icache_var was already incremented
    op add pc pc 4

end_instruction_trap:
    # halt if the power switch was manually disabled
    sensor enabled {{POWER_SWITCH}} @enabled
    jump main equal enabled true
    jump halt always

# exceptions

default_mtvec_handler:
    print "Control transferred to {{SYSCON}} (default mtvec), halting."
    printflush {{ERROR_OUTPUT}}
    jump halt always

illegal_instruction:
    set mcause 2
    # TODO: return faulting instruction bits?
    # continue into trap_without_mtval

trap_without_mtval:
    set mtval 0
    # continue into trap

trap:
    # set MPIE to MIE, set MIE to 0, and set MPP to privilege_mode
    op and mie mstatus 0b1000
    op shl mpie mie 4

    op shl mpp privilege_mode 11

    op and mstatus mstatus 0b11111111111111111110011101110111
    op or mstatus mstatus mpie
    op or mstatus mstatus mpp
    write mstatus {{CSRS}} "{{ 'mstatus'|csr }}"

    # set mcause
    write mcause {{CSRS}} "{{ 'mcause'|csr }}"

    # set mtval
    write mtval {{CSRS}} "{{ 'mtval'|csr }}"

    # set mepc to pc
    write pc {{CSRS}} "{{ 'mepc'|csr }}"

    # we only support direct mode, so set pc to mtvec
    read pc {{CSRS}} "{{ 'mtvec'|csr }}"
    set icache_var null

    # we don't have S-mode, so always trap into M-mode
    set privilege_mode 0b11

    # don't increment pc or instret
    jump end_instruction_trap always

# helper functions

# reload config options that are safe to change mid-execution
reload_config:
    # ipt go brrrr
    read TARGET_IPT {{CONFIG}} "TARGET_IPT"
    setrate TARGET_IPT
    set IPT @ipt # for debug output

    read BREAKPOINT_ADDRESS {{CONFIG}} "BREAKPOINT_ADDRESS"

    set @counter ret

# sign extension function
# value, length -> result
extend_sign:
    # https://graphics.stanford.edu/~seander/bithacks.html#VariableSignExtend
    op sub _mask length 1
    op shl _mask 1 _mask

    op xor result value _mask
    op sub result result _mask
    op and result result 0xffffffff # convert signed to unsigned

    set @counter ret

# converts a pair of two's complement unsigned values to signed in-place
# this converts two values at once because most usages of it need to convert two values
# also, the values are assumed to be in rs1 and rs2
# rs1, rs2 -> rs1, rs2
unsigned_to_signed_rs1_rs2:
    # value < 2^31 ? value : value - 2^32
    jump unsigned_to_signed__done_1 lessThan rs1 0x80000000 # 2^31
    op sub rs1 rs1 0x100000000 # 2^32
unsigned_to_signed__done_1:

    jump unsigned_to_signed__done_2 lessThan rs2 0x80000000
    op sub rs2 rs2 0x100000000
unsigned_to_signed__done_2:

    set @counter ret

# helper function to find the ram proc and variable for a given address
# address -> ram, variable
# ret: lookup_variable_ret
access_ram:
    op sub _address address {{RAM_START}}

access_ram_raw:
    # we store 4 bytes in each value
    op idiv _address _address 4

    # get the ram proc containing this address
    op idiv _ram_index _address {{RAM_PROC_VARS}}
    op add _ram_index _ram_index RAM_START_PROC

    op mod _ram_x _ram_index MEMORY_WIDTH
    op add _ram_x _ram_x MEMORY_X

    op idiv _ram_y _ram_index MEMORY_WIDTH
    op add _ram_y _ram_y MEMORY_Y

    getblock building ram _ram_x _ram_y

    # get the variable within the ram proc containing this address
    op mod _address _address {{RAM_PROC_VARS}}

# given a value 0 <= _address < RAM_PROC_VARS, resolve that variable in the lookup table
# this must stay directly after access_ram
# _address -> variable
# ret: lookup_variable_ret
lookup_variable:
    # the lookup is assumed to start at link 0, so we don't need to add an offset here
    op idiv _lookup _address {{LOOKUP_PROC_SIZE}}
    getlink _lookup _lookup

    op mod variable _address {{LOOKUP_PROC_SIZE}}
    lookup block variable variable
    sensor variable variable @name
    read variable _lookup variable

    set @counter lookup_variable_ret

# loads the word from memory that contains the specified address
# mcause is required in order to raise the correct exception in case of access fault
# address, mcause, mtval -> result
load_word:
    jump load_rom_word_unchecked lessThan address ROM_SIZE

load_ram_or_mmio_word:
    jump load_mmio_word greaterThanEq address {{MMIO_START}}

    jump trap lessThan address {{RAM_START}}
    jump trap greaterThanEq address RAM_END

load_ram_word_unchecked:
    # locate and read value from ram
    op add lookup_variable_ret @counter 1
    jump access_ram always
    read value ram variable
    # null is coerced to 0 by swap_endianness

    # tail call, swap_endianness will jump to the ret value of load_word's caller

# converts a little endian 32-bit number to big endian, or vice versa
# https://stackoverflow.com/a/2182184
# this MUST stay directly after load_word
# value -> result
swap_endianness:
    # byte 3 -> byte 0
    op shr result value 24
    op and result result 0xff

    # byte 1 -> byte 2
    op shl _tmp value 8
    op and _tmp _tmp 0xff0000
    op or result result _tmp

    # byte 2 -> byte 1
    op shr _tmp value 8
    op and _tmp _tmp 0xff00
    op or result result _tmp

    # byte 0 -> byte 3
    op shl _tmp value 24
    op and _tmp _tmp 0xff000000
    op or result result _tmp

    set @counter ret

# loads a word from ROM
# address -> result
load_rom_word_unchecked:
    # align to 4 bytes
    op and _address address 0xfffffffc

    # get rom proc data
    op idiv _rom_index _address {{ROM_PROC_BYTES}}

    op mod _rom_x _rom_index MEMORY_WIDTH
    op add _rom_x _rom_x MEMORY_X

    op idiv _rom_y _rom_index MEMORY_WIDTH
    op add _rom_y _rom_y MEMORY_Y

    getblock building _rom _rom_x _rom_y
    read _rom _rom "v"

    # read word and convert to big endian
    set result 0

    op mod _str_index _address {{ROM_PROC_BYTES}}
    set _shift 0 # leftmost byte in memory becomes rightmost byte in word
load_rom_word__loop:
    read _byte _rom _str_index
    op sub _byte _byte {{ROM_BYTE_OFFSET}}
    op max _byte _byte 0 # if we're reading out of bounds, default to 0
    op shl _byte _byte _shift
    op add result result _byte

    op add _str_index _str_index 1
    op add _shift _shift 8
    jump load_rom_word__loop lessThan _shift 32 # stop when we've read 4 bytes

    set _rom null # avoid issues with the vars menu and block data size
    set @counter ret

# address, mcause, mtval -> result
load_mmio_word:
    op sub _offset address {{MMIO_START}}
    op and _offset _offset 0xfffffffc
    jump trap greaterThanEq _offset 0x90

    # if we're in UART range, look it up
    op add access_uart_ret @counter 1
    jump access_uart greaterThanEq _offset 0x10

    # MCR, MSR, and SPR are all hardwired to zero
    set result 0
    jump load_mmio_word__uart_lsr equal _offset 0x24
    jump load_mmio_word__not_zero lessThan _offset 0x20
    set @counter ret
load_mmio_word__not_zero:

    op idiv _jump _offset 2
    op add @counter @counter _jump

    # mtime
    set result mtime
    set @counter ret
    # mtimeh
    set result mtimeh
    set @counter ret
    # mtimecmp
    set result mtimecmp
    set @counter ret
    # mtimecmph
    set result mtimecmph
    set @counter ret
    # UART
    # Receiver Holding Register: character received, or 0 if RX FIFO is empty
    jump load_mmio_word__uart_rhr notEqual _rx_read _rx_write
    set @counter ret
    # Interrupt Enable Register: 0 (not supported)
    set result 0b00000000
    set @counter ret
    # Interrupt Status Register: both FIFOs enabled, no interrupt pending, other flags 0
    # TODO: we should return 0 for FIFOs enabled until they actually get enabled
    set result 0b11000001
    set @counter ret
    # Line Control Register: word length = 8 bits, other flags 0
    set result 0b00000011
    set @counter ret

load_mmio_word__uart_rhr:
    # read one byte from the FIFO
    read result _uart _rx_read
    op and result result 0xff

    # HACK: if mcause is 7, we're loading this word as part of a store instruction, so don't modify UART state
    jump load_mmio_word__uart_rhr__empty equal mcause 7

    # else, advance read
    op add _rx_read _rx_read 1
    op mod _rx_read _rx_read UART_FIFO_MODULO
    write _rx_read _uart {{UART_RX_READ}}

load_mmio_word__uart_rhr__empty:
    set @counter ret

load_mmio_word__uart_lsr:
    # Line Status Register: transmitter/THR empty = TX FIFO empty, overrun error = RX FIFO overflowed, data ready = RX FIFO not empty, other flags 0

    # transmitter empty and THR empty
    jump load_mmio_word__uart_lsr__tx_not_empty notEqual _tx_read _tx_write
    set result 0b01100000
load_mmio_word__uart_lsr__tx_not_empty:

    # rx overrun error
    # we know an overrun occurred if read == wrap(write + 1) (ie. rx is full)
    op add _next_rx_write _rx_write 1
    op mod _next_rx_write _next_rx_write UART_FIFO_MODULO
    jump load_mmio_word__uart_lsr__no_rx_overrun notEqual _next_rx_write _rx_read

    # AND if _rx_write_raw != _rx_write (ie. overflow flag is set)
    jump load_mmio_word__uart_lsr__no_rx_overrun equal _rx_write_raw _rx_write

    op or result result 0b10
load_mmio_word__uart_lsr__no_rx_overrun:

    # rx data ready
    op notEqual _rx_data_ready _rx_read _rx_write
    op or result result _rx_data_ready

    set @counter ret

# caller must ensure offset is 4-byte aligned and in uart range
# _offset, access_uart_ret -> _offset, _uart, _rx_read, _rx_write_raw, _rx_write, _tx_read, _tx_write
access_uart:
    op sub _offset _offset 0x10
    
    op idiv _uart _offset 0x20
    op add _uart _uart {{UART_START_LINK}}
    getlink _uart _uart

    op mod _offset _offset 0x20
    op add _offset _offset 0x10

    read _rx_read _uart {{UART_RX_READ}}

    read _rx_write_raw _uart {{UART_RX_WRITE}}
    op and _rx_write _rx_write_raw 0xff

    read _tx_read _uart {{UART_TX_READ}}

    read _tx_write _uart {{UART_TX_WRITE}}

    set @counter access_uart_ret

# instruction decoder

# decoder entry point: decodes a single instruction and writes it to the icache
# the caller MUST set decode_var to null before the first consecutive call to this function
# instruction, decode_address -> op_id, imm, payload
# ret: decode_ret
decode:
    # the lowest 2 bits are always "11" for non-compressed instructions
    # check this first to increase the odds of an early exit for non-code addresses
    op and low_bits instruction 0b11
    jump decode_illegal_instruction notEqual low_bits 0b11

    # opcode
    op and opcode instruction 0b1111111

    # also bail out if we're in the big group of illegal instructions between OP-32 and 48b, or at the end after OP-VE
    jump decode__ok lessThan opcode 0b0111011 # OP-32
    jump decode_illegal_instruction lessThanEq opcode 0b1011111 # 48b
    jump decode_illegal_instruction greaterThanEq opcode 0b1110111 # OP-VE
decode__ok:

    # decode and pack registers into the payload
    # we do it in this order because instruction_24_15 is used for I-type and instruction_11_7 is used for S-type
    op and instruction_24_15 instruction 0b1111111111000000000000000
    op and instruction_11_7 instruction  0b0000000000000111110000000

    op shl icache_payload_rs2_rs1 instruction_24_15 22 # instruction[24:15] -> icache_payload[46:37]
    op shl icache_payload_rd instruction_11_7 25 # instruction[11:7] -> icache_payload[36:32]

    # we put the registers into the icache_payload variable here so that we don't have to fully pack the payload if decoding during instruction fetch
    op add icache_payload icache_payload_rs2_rs1 icache_payload_rd

    # this is used in both S-type and B-type
    op shr imm_4_0 instruction_11_7 7 # instruction[11:7] -> imm[4:0]

    # this is used in a bunch of places
    # NOTE: this is unsafe if instruction is longer than 32 bits, but that should never happen. hopefully.
    op shr funct12 instruction 20

    # decode common fields
    # funct3
    op shr funct3 instruction 12
    op and funct3 funct3 0b111

    # funct7
    op shr funct7 funct12 5

    # counter array based on (opcode >> 2), since the low 2 bits don't matter
    op shr jump opcode 2

    # skip the section of illegal instructions that we already handled above
    jump decode__before_OP-32 lessThan opcode 0b0111011 # OP-32
    op sub jump jump 10
decode__before_OP-32:

    op add @counter @counter jump

    jump decode_LOAD always
    jump decode_illegal_instruction always # LOAD-FP
    jump decode_custom-0 always
    jump decode_MISC-MEM always
    jump decode_OP-IMM always
    jump decode_AUIPC always
    jump decode_illegal_instruction always # OP-IMM-32
    jump decode_illegal_instruction always # 48b
    jump decode_STORE always
    jump decode_illegal_instruction always # STORE-FP
    jump decode_illegal_instruction always # custom-1
    jump decode_AMO always
    jump decode_OP always
    jump decode_LUI always
    # OP-32
    # 64b
    # MADD
    # MSUB
    # NMSUB
    # NMADD
    # OP-FP
    # OP-V
    # custom-2/rv128
    # 48b
    jump decode_BRANCH always
    jump decode_JALR always
    jump decode_illegal_instruction always # reserved
    jump decode_JAL always
    jump decode_SYSTEM always
    # OP-VE
    # custom-3/rv128
    # >=80b

decode_LUI:
    set op_id -53 # LUI
    jump decode_U-type always

decode_AUIPC:
    set op_id -8 # AUIPC
    
decode_U-type:
    # U-type: imm, rd_id
    # imm
    op and imm instruction 0b11111111111111111111000000000000
    jump end_decode always

decode_JAL:
    # J-type: imm, rd_id
    # imm
    op shr imm_20 instruction 11 # instruction[31] -> imm[20]
    # instruction: instruction[19:12] -> imm[19:12]
    op shr imm_11 instruction 9 # instruction[20] -> imm[11]
    # funct12: instruction[30:21] -> imm[10:1]

    op and imm_20 imm_20         0b100000000000000000000
    op and imm_19_12 instruction 0b011111111000000000000
    op and imm_11 imm_11         0b000000000100000000000
    op and imm_10_1 funct12      0b000000000011111111110

    op add imm imm_20 imm_19_12
    op add imm imm imm_11
    op add imm imm imm_10_1

    # extend sign
    op xor imm imm 0b100000000000000000000
    op sub imm imm 0b100000000000000000000

    set op_id -62 # JAL
    jump end_decode always

decode_JALR:
    set op_id -61 # JALR
    jump decode_I-type always

decode_BRANCH:
    # B-type: rs1, rs2, imm
    jump decode_illegal_instruction equal funct3 2
    jump decode_illegal_instruction equal funct3 3

    # imm
    op shr imm_12 instruction 19 # instruction[31] -> imm[12]
    op shl imm_11 instruction 4 # instruction[7] -> imm[11]
    # funct12: instruction[30:25] -> imm[10:5]
    # imm_4_0/rd: instruction[11:8] -> imm[4:1]

    op and imm_12 imm_12    0b1000000000000
    op and imm_11 imm_11    0b0100000000000
    op and imm_10_5 funct12 0b0011111100000
    op and imm_4_1 imm_4_0  0b0000000011110

    op add imm imm_12 imm_11
    op add imm imm imm_10_5
    op add imm imm imm_4_1

    # extend sign
    op xor imm imm 0b1000000000000
    op sub imm imm 0b1000000000000

    # -64: BEQ
    # -63: BNE
    # -62: (JAL)
    # -61: (JALR)
    # -60: BLT
    # -59: BGE
    # -58: BLTU
    # -57: BGEU
    op add op_id -64 funct3
    jump end_decode always

decode_LOAD:
    jump decode_illegal_instruction equal funct3 3
    jump decode_illegal_instruction greaterThanEq funct3 6

    # -56: LB
    # -55: LH
    # -54: LW
    # -53: (LUI)
    # -52: LBU
    # -51: LHU
    op add op_id -56 funct3
    jump decode_I-type always

decode_STORE:
    # S-type: rs1, rs2, imm
    jump decode_illegal_instruction greaterThanEq funct3 3

    # imm
    op shl imm_11_5 funct7 5 # instruction[31:25] -> imm[11:5]
    # imm_4_0: instruction[11:7] -> imm[4:0]

    op add imm imm_11_5 imm_4_0

    # extend sign
    op xor imm imm 0b100000000000
    op sub imm imm 0b100000000000

    # -50: SB
    # -49: SH
    # -48: SW
    op add op_id -50 funct3
    jump end_decode always

decode_AMO:
    # R-type: rs1, rs2, rd_id
    jump decode_illegal_instruction notEqual funct3 0b010

    # funct5
    # mlogv32 is single-hart, so just ignore aq and rl
    op shr funct5 funct7 2

    # funct5 either has bits in [4:2] or [1:0] set, never both
    # (ab)use that so we don't need 32 lookup table entries
    jump decode_AMO__high greaterThan funct5 0b11

    # low bits
    # -47: AMOADD.W
    # -46: AMOSWAP.W
    # -45: LR.W
    # -44: SC.W
    op add op_id -47 funct5
    jump end_decode always

decode_AMO__high:
    # high bits
    op and low funct5 0b11
    jump decode_illegal_instruction notEqual low 0b00

    # -43: AMOXOR.W
    # -42: AMOOR.W
    # -41: AMOAND.W
    # -40: AMOMIN.W
    # -39: AMOMAX.W
    # -38: AMOMINU.W
    # -37: AMOMAXU.W
    op shr funct5 funct5 2
    op add op_id -44 funct5 # funct5 >> 2 starts at 1, not 0
    jump end_decode always

decode_OP-IMM:
    jump decode_SLLI equal funct3 1
    jump decode_SRLI_SRAI equal funct3 5

    # -36: ADDI
    # -35: (SUB)
    # -34: SLTI
    # -33: SLTIU
    # -32: XORI
    # -31: (SRA)
    # -30: ORI
    # -29: ANDI
    op add op_id -36 funct3
    # continue into decode_I-type

# common decoder for I-type instructions
# this should be called AFTER setting op_id
decode_I-type:
    # I-type: rs1, imm, rd_id
    # imm is just funct12 but sign-extended
    op xor funct12 funct12 0b100000000000
    op sub funct12 funct12 0b100000000000
    # continue into decode_I-type_no_extend_sign

# common decoder for I-type instructions without a sign-extended immediate
decode_I-type_no_extend_sign:
    # I-type: rs1, imm, rd_id
    # imm
    # NOTE: SRAI and decode_I-type both mutate funct12
    set imm funct12
    jump end_decode always

decode_SLLI:
    # shamt is encoded in the low 5 bits of imm, so sign extension is redundant
    jump decode_illegal_instruction notEqual funct7 0b0000000
    set op_id -3 # SLLI
    jump decode_I-type_no_extend_sign always

decode_SRLI_SRAI:
    # SRLI
    set op_id -2 # SRLI
    jump decode_I-type_no_extend_sign equal funct7 0b0000000

    # SRAI
    jump decode_illegal_instruction notEqual funct7 0b0100000
    op and funct12 funct12 0b11111 # HACK: zero out the high bits of funct12 so funct7 isn't included in imm
    set op_id -1 # SRAI
    jump decode_I-type_no_extend_sign always

decode_OP:
    # R-type: rs1, rs2, rd_id
    # -28: ADD
    # -27: SLL
    # -26: SLT
    # -25: SLTU
    # -24: XOR
    # -23: SRL
    # -22: OR
    # -21: AND
    op add op_id -28 funct3
    jump end_decode equal funct7 0b0000000

    # -20: MUL
    # -19: MULH
    # -18: MULHSU
    # -17: MULHU
    # -16: DIV
    # -15: DIVU
    # -14: REM
    # -13: REMU
    op add op_id -20 funct3
    jump end_decode equal funct7 0b0000001

    jump decode_illegal_instruction notEqual funct7 0b0100000

    set op_id -35 # SUB
    jump end_decode equal funct3 0b000

    set op_id -31 # SRA
    jump end_decode equal funct3 0b101

    jump decode_illegal_instruction always

decode_MISC-MEM:
    jump decode_illegal_instruction greaterThan funct3 1 # FENCE=0, FENCE.I=1

    # NOTE: we put FENCE at -4 because -3 to -1 are placed manually, not by a funct3 addition
    # so we can move them to different op_ids if we want to add a separate handler for FENCE.I
    set op_id -4 # FENCE/FENCE.I
    jump decode_I-type_no_extend_sign always

decode_SYSTEM:
    jump decode_illegal_instruction equal funct3 4

    # -12: PRIV
    # -11: CSRRW
    # -10: CSRRS
    # -9: CSRRC
    # -8: (AUIPC)
    # -7: CSRRWI
    # -6: CSRRSI
    # -5: CSRRCI
    op add op_id -12 funct3
    jump decode_I-type_no_extend_sign always

decode_custom-0:
    # Xmlogsys
    # 1: MLOGSYS
    # 2: MLOGDRAW
    op add op_id 1 funct3
    jump decode_I-type_no_extend_sign lessThan funct3 2
    # continue into decode_illegal_instruction if funct3 >= 2

# must stay directly before end_decode
decode_illegal_instruction:
    # use 0 as the illegal instruction id because null coerces to 0
    set op_id 0
    # this is required to prevent the op_id field from theoretically being corrupted if we jump here before setting icache_payload in decode
    set icache_payload 0
    # continue into end_decode

# all decoders jump here after completing successfully
end_decode:
    # do this here because several decoders need to do it for sign extension
    # and to make sure the immediate doesn't corrupt the registers
    op and imm imm 0xffffffff

    # this branch is taken if decoding during instruction fetch
    jump end_decode__no_write_icache strictEqual decode_address null

    # get the current instruction cache processor and variable
    jump end_decode__decode_var_valid notEqual decode_var null
    op add _address RAM_SIZE decode_address
    op add lookup_variable_ret @counter 1
    jump access_ram_raw always
    set decode_ram ram
    set decode_var variable
end_decode__decode_var_valid:

    # pack op_id, registers (already in icache_payload), and imm into a single double
    # this is skipped if decoding for instruction fetch because op_id and imm are already in variables
    # IMPORTANT: use or instead of add because op_id may be negative
    op shl icache_payload_op_id op_id 47
    op or icache_payload icache_payload icache_payload_op_id
    op or icache_payload icache_payload imm

    # write to the icache
    write icache_payload decode_ram decode_var
    read decode_var {{INCR}} decode_var

end_decode__no_write_icache:
    set @counter decode_ret

# instruction handlers

LUI:
    # U-type: imm, rd_id
    set result imm
    jump end_instruction_with_result always

AUIPC:
    # U-type: imm, rd_id
    op add result imm pc
    op mod result result 0x100000000 # trunc 32
    jump end_instruction_with_result always

JAL:
    # J-type: imm, rd_id
    op add target pc imm
    jump unconditional_jump always

JALR:
    # I-type: rs1, imm, rd_id
    op add target rs1 imm
    op and target target 0xfffffffe # clear LSB
    jump unconditional_jump always

BEQ:
    # B-type: rs1, rs2, imm
    jump conditional_branch equal rs1 rs2
    jump end_instruction always

BNE:
    # B-type: rs1, rs2, imm
    jump conditional_branch notEqual rs1 rs2
    jump end_instruction always

BLT:
    # B-type: rs1, rs2, imm
    op add ret @counter 1
    jump unsigned_to_signed_rs1_rs2 always
    # continue into BLTU

BLTU:
    # B-type: rs1, rs2, imm
    jump conditional_branch lessThan rs1 rs2
    jump end_instruction always

BGE:
    # B-type: rs1, rs2, imm
    op add ret @counter 1
    jump unsigned_to_signed_rs1_rs2 always
    # continue into BGEU

BGEU:
    # B-type: rs1, rs2, imm
    jump end_instruction lessThan rs1 rs2
    # continue into conditional_branch if rs1 >= rs2

conditional_branch:
    op add target pc imm
    set rd_id 0 # prevent end_instruction_with_result from writing to a register
    # continue into unconditional_jump

unconditional_jump:
    op mod target target 0x100000000 # trunc 32

    op mod remainder target 4
    set mcause 0 # instruction address misaligned
    set mtval target
    jump trap notEqual remainder 0

    # write pc+4 to rd
    op add result pc 4
    op mod result result 0x100000000 # trunc 32

    # jump to target
    op sub pc target 4 # HACK: end_instruction always increments the pc, so set the new pc to target - 4
    set icache_var null

    jump end_instruction_with_result always

LB:
    # I-type: rs1, imm, rd_id
    set length 8
    set is_signed true
    jump load_value always

LH:
    # I-type: rs1, imm, rd_id
    set length 16
    set is_signed true
    jump load_value always

LW:
    # I-type: rs1, imm, rd_id
    set length 32
    jump load_value_unsigned always

LBU:
    # I-type: rs1, imm, rd_id
    set length 8
    jump load_value_unsigned always

LHU:
    # I-type: rs1, imm, rd_id
    set length 16
    # continue into load_value_unsigned

load_value_unsigned:
    set is_signed false
    # continue into load_value

# helper for LOAD instructions to load a value with a specified length in bits (8, 16, or 32) from memory
# raises a misaligned-load exception if the address is misaligned for the specified length
# rs1 (address), imm (offset), rd_id, length, is_signed ->
load_value:
    op add address rs1 imm
    op mod address address 0x100000000 # 2^32 (trunc 32)

    # check alignment
    op idiv _bytes length 8
    op mod _alignment address _bytes
    set mcause 4 # load address misaligned
    set mtval address
    jump trap notEqual _alignment 0

    # load the word containing the address
    set mcause 5 # load access fault
    op add ret @counter 1
    jump load_word always

    # right shift by (address % 4) bits
    op mod _shift address 4
    op mul _shift _shift 8
    op shr result result _shift

    # truncate to the specified number of bits
    op pow _divisor 2 length
    op mod result result _divisor

    # extend the sign of the value if it's signed
    # NOTE: we can't remove the set by changing variable names because we need the final value to be in result in both cases
    set value result
    op add ret @counter 1
    jump extend_sign equal is_signed true

    # write result to rd
    jump end_instruction_with_result always

SB:
    # S-type: rs1, rs2, imm
    set length 8
    jump store_value always

SH:
    # S-type: rs1, rs2, imm
    set length 16
    jump store_value always

SW:
    # S-type: rs1, rs2, imm
    set length 32
    # continue into store_value

# helper for STORE instructions to store a value with a specified length in bits (8, 16, or 32) to memory
# raises a misaligned-store exception if the address is misaligned for the specified length
# TODO: the 32-bit case could be optimized a lot
# rs1 (address), rs2 (value), imm (offset), length ->
store_value:
    op add address rs1 imm
    op mod address address 0x100000000 # 2^32 (trunc 32)

    jump store_value__syscon equal address {{SYSCON}}

    # check alignment
    op idiv _bytes length 8
    op mod _alignment address _bytes
    set mcause 6 # store/AMO address misaligned
    set mtval address
    jump trap notEqual _alignment 0

    # create a bitmask with 0 in the section we want to replace and 1 everywhere else
    op mod _shift address 4
    op mul _shift _shift 8

    op pow _length_squared 2 length
    op sub _bitmask _length_squared 1
    op shl _bitmask _bitmask _shift
    op sub _bitmask 0xffffffff _bitmask

    # take the low n bits of the value to store, and shift it to line up with the zeros in the mask
    op mod _value rs2 _length_squared
    op shl _value _value _shift

    # load the word containing the address
    set mcause 7 # store/AMO access fault
    op add ret @counter 1
    jump load_ram_or_mmio_word always

    # insert the value into the word
    op and result result _bitmask
    op add value _value result

    # get word-aligned decode address
    # we do this here because MMIO also needs a word-aligned address
    op and decode_address address 0xfffffffc

    # if it's in the MMIO range, handle it separately
    jump store_mmio_word_unchecked greaterThanEq address {{MMIO_START}}

store_ram_word_unchecked:
    # otherwise, store the new value
    op add ret @counter 1
    jump swap_endianness always

    write result ram variable

    # decode the new value and update the icache to allow executing from RAM and self-modifying code
    # TODO: add a way for the CPU to temporarily disable this for performance?
    set instruction value
    set decode_var null

    # only decode if we're in icache range
    op add decode_ret @counter 1
    jump decode lessThan decode_address ICACHE_SIZE

    jump end_instruction always

store_mmio_word_unchecked:
    op sub _offset decode_address {{MMIO_START}}

    # trigger a time update
    set next_time_update @time

    # reset last_time_update if writing to mtime or mtimeh
    jump store_mmio_word_unchecked__not_mtime greaterThanEq _offset 0x08
    set last_time_update @time
store_mmio_word_unchecked__not_mtime:

    # if we're in UART range, look it up
    op add access_uart_ret @counter 1
    jump access_uart greaterThanEq _offset 0x10

    # ignore writes to UART registers other than THR and FCR
    jump store_mmio_word_unchecked__uart_fcr equal _offset 0x18
    jump end_instruction greaterThan _offset 0x10

    # NOTE: if we get to this point, the MMIO address must be valid, so we don't need a bounds check
    op idiv _jump _offset 2
    op add @counter @counter _jump

    # mtime
    set mtime value
    jump end_instruction always
    # mtimeh
    set mtimeh value
    jump end_instruction always
    # mtimecmp
    set mtimecmp value
    jump end_instruction always
    # mtimecmph
    set mtimecmph value
    jump end_instruction always
    # UART
    # Transmitter Holding Register
    # append value to queue
    # NOTE: we don't check for overflow here, see readme
    op add _index _tx_write {{UART_TX_START}}
    op and value value 0xff
    write value _uart _index

    # advance write
    op add _tx_write _tx_write 1
    op mod _tx_write _tx_write UART_FIFO_MODULO
    write _tx_write _uart {{UART_TX_WRITE}}

    jump end_instruction always

store_mmio_word_unchecked__uart_fcr:
    # FIFO Control Register

    op and reset_rx value 0b11
    jump store_mmio_word_unchecked__uart_fcr__no_reset_rx equal reset_rx 0
    write _rx_write _uart {{UART_RX_READ}}
store_mmio_word_unchecked__uart_fcr__no_reset_rx:

    op and reset_tx value 0b101
    jump store_mmio_word_unchecked__uart_fcr__no_reset_tx equal reset_tx 0
    write _tx_read _uart {{UART_TX_WRITE}}
store_mmio_word_unchecked__uart_fcr__no_reset_tx:

    jump end_instruction always

store_value__syscon:
    jump halt equal rs2 0
    jump reset equal rs2 1
    jump end_instruction always

LR.W:
    # R-type: rs1, rs2=0, rd_id

    # check address and alignment
    set mcause 4 # load address misaligned
    op add ret @counter 1
    jump atomic_validate_address always

    # load value
    op add ret @counter 1
    jump load_ram_word_unchecked always

    # register reservation set
    # TODO: implement Za64rs?
    set reservation_set address

    jump end_instruction_with_result always

atomic_validate_address:
    set address rs1
    set mtval address

    op mod alignment address 4
    jump trap notEqual alignment 0

    op add mcause mcause 1 # load/store/AMO access fault
    jump trap lessThan address {{RAM_START}}
    jump trap greaterThanEq address RAM_END

    set @counter ret

SC.W:
    # R-type: rs1, rs2, rd_id

    # check address and alignment
    set mcause 6 # store/AMO address misaligned
    op add ret @counter 1
    jump atomic_validate_address always

    # check if reservation is valid and contains rs1
    op strictEqual success address reservation_set

    # invalidate reservation
    set reservation_set null

    # write 0 to rd if successful, else write 1
    jump SC.W__no_write_rd equal rd_id 0
    op notEqual result success true
    write result {{REGISTERS}} rd_id
SC.W__no_write_rd:

    # conditionally write value
    jump end_instruction notEqual success true

    op add lookup_variable_ret @counter 1
    jump access_ram always

    set value rs2
    jump store_ram_word_unchecked always

AMOSWAP.W:
    # R-type: rs1, rs2, rd_id
    set amo_op 0 # swap
    
amo:
    # check address and alignment
    set mcause 6 # store/AMO address misaligned
    op add ret @counter 1
    jump atomic_validate_address always

    # read
    op add ret @counter 1
    jump load_ram_word_unchecked always
    
    # put value in rd
    jump amo__no_write_rd equal rd_id 0
    write result {{REGISTERS}} rd_id
amo__no_write_rd:

    # modify
    set rs1 result # hack
    op add @counter @counter amo_op

    # swap
    set result rs2
    jump amo__done_modify always
    # add
    op add result result rs2
    jump amo__done_modify always
    # and
    op and result result rs2
    jump amo__done_modify always
    # or
    op or result result rs2
    jump amo__done_modify always
    # xor
    op xor result result rs2
    jump amo__done_modify always
    # min
    op add ret @counter 1
    jump unsigned_to_signed_rs1_rs2 always
    # continue into minu
    # minu
    op min result rs1 rs2
    jump amo__done_modify always
    # max
    op add ret @counter 1
    jump unsigned_to_signed_rs1_rs2 always
    # continue into maxu
    # maxu
    op max result rs1 rs2
amo__done_modify:

    # write
    op and value result 0xffffffff
    jump store_ram_word_unchecked always

AMOADD.W:
    # R-type: rs1, rs2, rd_id
    set amo_op 2 # add
    jump amo always

AMOAND.W:
    # R-type: rs1, rs2, rd_id
    set amo_op 4 # and
    jump amo always

AMOOR.W:
    # R-type: rs1, rs2, rd_id
    set amo_op 6 # or
    jump amo always

AMOXOR.W:
    # R-type: rs1, rs2, rd_id
    set amo_op 8 # xor
    jump amo always

AMOMIN.W:
    # R-type: rs1, rs2, rd_id
    set amo_op 10 # min
    jump amo always

AMOMINU.W:
    # R-type: rs1, rs2, rd_id
    set amo_op 12 # minu
    jump amo always

AMOMAX.W:
    # R-type: rs1, rs2, rd_id
    set amo_op 14 # max
    jump amo always

AMOMAXU.W:
    # R-type: rs1, rs2, rd_id
    set amo_op 16 # maxu
    jump amo always

# most of the register-register instructions are identical to their register-immediate counterparts
# so just set imm to rs2 and reuse the existing logic, placing them directly before to save space

SUB:
    # R-type: rs1, rs2, rd_id
    # apply two's complement to negate the value in rs2
    op sub rs2 0x100000000 rs2
    op mod rs2 rs2 0x100000000
    # continue into ADD

ADD:
    # R-type: rs1, rs2, rd_id
    set imm rs2
    # continue into ADDI

ADDI:
    # I-type: rs1, imm, rd_id
    op add result rs1 imm
    op mod result result 0x100000000 # 2^32 (trunc 32)
    jump end_instruction_with_result always

SLTI:
    # I-type: rs1, imm, rd_id
    set rs2 imm
    # continue into SLT

SLT:
    # R-type: rs1, rs2, rd_id
    op add ret @counter 1
    jump unsigned_to_signed_rs1_rs2 always
    # continue into SLTU

SLTU:
    # R-type: rs1, rs2, rd_id
    set imm rs2
    # continue into SLTIU

SLTIU:
    # I-type: rs1, imm, rd_id
    op lessThan result rs1 imm
    jump end_instruction_with_result always

XOR:
    # R-type: rs1, rs2, rd_id
    set imm rs2
    # continue into XORI

XORI:
    # I-type: rs1, imm, rd_id
    op xor result rs1 imm
    jump end_instruction_with_result always

OR:
    # R-type: rs1, rs2, rd_id
    set imm rs2
    # continue into ORI

ORI:
    # I-type: rs1, imm, rd_id
    op or result rs1 imm
    jump end_instruction_with_result always

AND:
    # R-type: rs1, rs2, rd_id
    set imm rs2
    # continue into ANDI

ANDI:
    # I-type: rs1, imm, rd_id
    op and result rs1 imm
    jump end_instruction_with_result always

SLL:
    # R-type: rs1, rs2, rd_id
    op mod imm rs2 32 # 2^5 (trunc 5)
    # continue into SLLI

SLLI:
    # I-type: rs1, imm, rd_id
    # truncate before shifting to avoid overflowing 52 integer bits in double
    op sub length 32 imm
    op pow divisor 2 length

    op mod result rs1 divisor
    op shl result result imm

    jump end_instruction_with_result always

SRL:
    # R-type: rs1, rs2, rd_id
    op mod imm rs2 32 # 2^5 (trunc 5)
    # continue into SRLI

SRLI:
    # I-type: rs1, imm, rd_id
    op shr result rs1 imm
    jump end_instruction_with_result always

SRA:
    # R-type: rs1, rs2, rd_id
    op mod imm rs2 32 # 2^5 (trunc 5)
    # continue into SRAI

SRAI:
    # I-type: rs1, imm, rd_id
    op shr value rs1 imm

    op sub length 32 imm
    op add ret @counter 1
    jump extend_sign always

    jump end_instruction_with_result always

MUL:
    # R-type: rs1, rs2, rd_id
    op add ret @counter 1
    jump mul_decomp always

    op add result high_low low_high
    op shl result result 16
    op add result result low_low

    op and result result 0xffffffff

    jump end_instruction_with_result always

mul_decomp:
    # https://github.com/es-shims/Math.imul/blob/dab2a3bfc9ce5f4af97057c64ae1880fdbac57a5/implementation.js

    op shr rs1_high rs1 16 # no truncate necessary, rs1 is already 32 bits
    op and rs1_low rs1 0xffff
    op shr rs2_high rs2 16
    op and rs2_low rs2 0xffff

    op mul high_high rs1_high rs2_high
    op mul high_low rs1_high rs2_low
    op mul low_high rs1_low rs2_high
    op mul low_low rs1_low rs2_low

    set @counter ret

MULH:
    # R-type: rs1, rs2, rd_id
    op greaterThanEq rs1_negative rs1 0x80000000 # check if the sign bit is set
    op greaterThanEq rs2_negative rs2 0x80000000

mulh_s_u:
    op add ret @counter 1
    jump mul_decomp always

    # https://github.com/scala-js/scala-js/blob/7e9dbfcd5c9a9eb3fe065db568c4c96ef4e19a81/linker-private-library/src/main/scala/org/scalajs/linker/runtime/RuntimeLong.scala#L422
    op shr result low_low 16
    op add result result low_high
    op add result result high_low
    op shr result result 16
    op add result result high_high

    # https://stackoverflow.com/a/22847373
    jump mulh_s_u__rs1_positive notEqual rs1_negative true
    op sub result result rs2
mulh_s_u__rs1_positive:

    jump mulh_s_u__rs2_positive notEqual rs2_negative true
    op sub result result rs1
mulh_s_u__rs2_positive:

    op and result result 0xffffffff

    jump end_instruction_with_result always

MULHSU:
    # R-type: rs1, rs2, rd_id
    op greaterThanEq rs1_negative rs1 0x80000000
    set rs2_negative false
    jump mulh_s_u always

MULHU:
    # R-type: rs1, rs2, rd_id
    set rs1_negative false
    set rs2_negative false
    jump mulh_s_u always

DIV:
    # R-type: rs1, rs2, rd_id
    op add ret @counter 1
    jump unsigned_to_signed_rs1_rs2 always
    # continue into DIVU

DIVU:
    # R-type: rs1, rs2, rd_id
    jump div_by_zero equal rs2 0

    # use div instead of idiv and then cast to long so that it rounds towards zero
    # https://stackoverflow.com/a/8387377
    op div result rs1 rs2
    op and result result 0xffffffff

    jump end_instruction_with_result always

div_by_zero:
    # all bits set
    set result 0xffffffff
    jump end_instruction_with_result always

REM:
    # R-type: rs1, rs2, rd_id
    op add ret @counter 1
    jump unsigned_to_signed_rs1_rs2 always
    # continue into REMU

# reimu?
REMU:
    # R-type: rs1, rs2, rd_id
    jump rem_by_zero equal rs2 0

    op mod result rs1 rs2
    op and result result 0xffffffff # only necessary for signed

    jump end_instruction_with_result always

rem_by_zero:
    # dividend
    set result rs1
    jump end_instruction_with_result always

FENCE:
    # I-type: rs1, imm, rd_id
    # note: this currently also handles FENCE.I, but that will need to change if we want either of them to not be a no-op

    # PAUSE
    # TODO: there's probably a better way to do this
    jump FENCE__not_pause notEqual rs1_id 0
    jump FENCE__not_pause notEqual imm 0b000000010000
    jump FENCE__not_pause notEqual rd_id 0

    wait 0.00001

FENCE__not_pause:
    # no-op
    jump end_instruction always

PRIV:
    # I-type: rs1, rs1_id=uimm, imm=funct12/csr, rd_id
    # we partially decode this at runtime to simplify the decoding logic
    # privilege mode changes should be relatively rare, so it should be fine for them to be a bit slower
    jump ECALL equal imm 0
    jump EBREAK equal imm 1
    jump MRET equal imm 0b001100000010
    jump end_instruction equal imm 0b000100000101 # WFI (no-op, ignore TW bit)
    jump illegal_instruction always

ECALL:
    # 0b1000 (8) = ecall from U-mode
    # 0b1011 (11) = ecall from S-mode
    op or mcause 0b1000 privilege_mode
    jump trap_without_mtval always

EBREAK:
    set mcause 3 # breakpoint
    # mtval is set to pc by main
    jump trap always

MRET:
    jump illegal_instruction lessThan privilege_mode 0b11

    # set MIE to MPIE, set MPIE to 1, set privilege_mode to MPP, and set MPP to U
    op and mpie mstatus 0b10000000
    op shr mie mpie 4

    op and privilege_mode mstatus 0b1100000000000
    op shr privilege_mode privilege_mode 11

    op and mstatus mstatus 0b11111111111111111110011111110111
    op or mstatus mstatus mie
    op or mstatus mstatus 0b10000000 # MPIE
    write mstatus {{CSRS}} "{{ 'mstatus'|csr }}"

    # set pc to MEPC
    # sub 4 because end_instruction will increment it
    read pc {{CSRS}} "{{ 'mepc'|csr }}"
    op sub pc pc 4
    set icache_var null

    # check for interrupts
    set next_time_update @time

    jump end_instruction always

CSRRWI:
    # CSRI-type: rs1_id=uimm, imm=csr, rd_id
    set rs1 rs1_id
    # continue into CSRRW

CSRRW:
    # CSR-type: rs1, imm=csr, rd_id
    set csr_op 0 # read/write
    jump read_modify_write_csr always

CSRRSI:
    # CSRI-type: rs1_id=uimm, imm=csr, rd_id
    set rs1 rs1_id
    # continue into CSRRS

CSRRS:
    # CSR-type: rs1, imm=csr, rd_id
    set csr_op 2 # read and set bits
    jump read_modify_write_csr always

CSRRCI:
    # CSRI-type: rs1_id=uimm, imm=csr, rd_id
    set rs1 rs1_id
    # continue into CSRRC

CSRRC:
    # CSR-type: rs1, imm=csr, rd_id
    set csr_op 4 # read and clear bits
    # continue into read_modify_write_csr

read_modify_write_csr:
    # csr is stored in imm
    # csr[11:10] indicates whether the register is read/write (00, 01, 10) or read-only (11)
    op and readonly imm 0b110000000000
    op equal readonly readonly 0b110000000000

    # csr[9:8] encodes the lowest privilege level that can access the CSR
    op and required_privilege imm 0b1100000000
    op shr required_privilege required_privilege 8
    jump illegal_instruction lessThan privilege_mode required_privilege

    # 0x7b0-0x7bf are only visible to debug mode
    op shr csr_11_4 imm 4
    jump illegal_instruction equal csr_11_4 0x7b

    # read

    set _address imm
    op add lookup_variable_ret @counter 1
    jump lookup_variable always
    read result {{CSRS}} variable

    # modify

    op add @counter @counter csr_op

    # read/write (always write)
    set new_value rs1
    jump read_modify_write_csr__always_write always
    # read and set bits (conditional write)
    op or new_value rs1 result
    jump read_modify_write_csr__conditional_write always
    # read and clear bits (conditional write)
    op not new_value rs1
    op and new_value new_value result

    # write

read_modify_write_csr__conditional_write:
    # we don't throw an exception if uimm is 0 or rs1 is x0
    # but we do if rs1 is some other register that happens to contain 0
    jump end_instruction_with_result equal rs1_id 0

read_modify_write_csr__always_write:
    jump illegal_instruction equal readonly true

    # handlers for specific CSRs
    jump end_instruction_with_result equal variable "{{ 'misa'|csr }}" # read-only
    jump read_modify_write_csr__mstatus equal variable "{{ 'mstatus'|csr }}"
    jump read_modify_write_csr__mip equal variable "{{ 'mip'|csr }}"
    jump read_modify_write_csr__mie equal variable "{{ 'mie'|csr }}"
    jump read_modify_write_csr__mepc equal variable "{{ 'mepc'|csr }}"
    jump read_modify_write_csr__mtvec equal variable "{{ 'mtvec'|csr }}"
    jump read_modify_write_csr__mcycle equal variable "{{ 'mcycle'|csr }}"
    jump read_modify_write_csr__mcycleh equal variable "{{ 'mcycleh'|csr }}"
    jump read_modify_write_csr__minstret equal variable "{{ 'minstret'|csr }}"
    jump read_modify_write_csr__minstreth equal variable "{{ 'minstreth'|csr }}"
read_modify_write_csr__end_handler:

    write new_value {{CSRS}} variable
    jump end_instruction_with_result always

read_modify_write_csr__mstatus:
    # clear WPRI and read-only zero fields
    # SD/XS/FS/VS                -              ----  --
    # WPRI                        --------                  - - -
    # S-mode                              - ---         -  -   -
    # UBE                                                 -
    op and mstatus new_value 0b00000000001000100001100010001000

    # if MPP was set to 10 (reserved) or 01 (S), set it to 0
    op and mpp mstatus 0b1100000000000
    jump read_modify_write_csr__mstatus__mpp_m equal mpp 0b1100000000000
    op and mstatus mstatus 0b11111111111111111110011111111111
read_modify_write_csr__mstatus__mpp_m:

    # check for interrupts
    set next_time_update @time

    jump read_modify_write_csr__end_handler always

read_modify_write_csr__mip:
    # clear read-only fields
    # 0                                          -- - - - - - - -
    # LCOFIP                                       -
    # read-only                                      -   -
    # S-mode                                           -   -   -
    # MSIP                                                   -
    op and new_value new_value 0b11111111111111110000100010000000

    # enforce read-only non-zero fields
    # MEIP                                  -
    # MTIP                                      -
    op and tmp result 0b00000000000000000000100010000000
    op or new_value new_value tmp

    # check for interrupts
    set next_time_update @time

    jump read_modify_write_csr__end_handler always

read_modify_write_csr__mie:
    # clear read-only zero fields
    # 0                                          -- - - - - - - -
    # LCOFIE                                       -
    # S-mode                                           -   -   -
    # MSIE                                                   -
    op and new_value new_value 0b11111111111111110000100010000000

    # check for interrupts
    set next_time_update @time

    jump read_modify_write_csr__end_handler always

read_modify_write_csr__mepc:
    # IALIGN=32, so the two low bits of mepc are always zero
    op and new_value new_value 0xfffffffc
    jump read_modify_write_csr__end_handler always

read_modify_write_csr__mtvec:
    # only allow direct mode
    op and new_value new_value 0xfffffffc
    jump read_modify_write_csr__end_handler always

read_modify_write_csr__mcycle:
    set mcycle new_value
    set last_cycle_update @tick
    set next_time_update @time
    jump end_instruction_with_result always

read_modify_write_csr__mcycleh:
    set mcycleh new_value
    set next_time_update @time
    jump end_instruction_with_result always

read_modify_write_csr__minstret:
    # a value written to instret by one instruction should be the value read by the following instruction
    op sub minstret new_value 1
    jump end_instruction_with_result always

read_modify_write_csr__minstreth:
    # if minstret is going to overflow on this increment, minstreth should be new_value - 1 so that it has the expected value for the next instruction
    op equal is_minstret_overflowing minstret 0xffffffff
    op sub minstreth new_value is_minstret_overflowing

    # we need to write this in case minstreth doesn't update this tick
    write minstreth {{CSRS}} "{{ 'minstreth'|csr }}"
    write minstreth {{CSRS}} "{{ 'instreth'|csr }}"
    
    jump end_instruction_with_result always

MLOGSYS:
    # I-type: rs1, imm=funct12, rd_id
    jump illegal_instruction greaterThan imm 3
    
    # TODO: we could save an instruction if we used B-type instead of I-type
    op mul jump imm 2
    op add @counter @counter jump

    # init icache
    op min __etext rs1 ROM_SIZE
    jump MLOGSYS__init_icache always
    # printchar
    printchar rs1
    jump end_instruction always
    # printflush
    printflush {{ERROR_OUTPUT}}
    jump end_instruction always
    # drawflush
    drawflush {{DISPLAY}}
    jump end_instruction always

MLOGSYS__init_icache:
    op min __etext __etext ICACHE_SIZE

    # decode .text
    set decode_address 0
    set decode_var null

MLOGSYS__init_icache__loop:
    set address decode_address
    op add ret @counter 1
    jump load_rom_word_unchecked always
    set instruction result

    op add decode_ret @counter 1
    jump decode always

    op add decode_address decode_address 4
    jump MLOGSYS__init_icache__loop lessThan decode_address __etext

    jump end_instruction always

MLOGDRAW:
    # I-type: rs1, imm=funct12, rd_id
    jump illegal_instruction greaterThan imm 15

    read a1 {{REGISTERS}} 11
    read a2 {{REGISTERS}} 12
    read a3 {{REGISTERS}} 13
    read a4 {{REGISTERS}} 14
    read a5 {{REGISTERS}} 15

    op mul jump imm 2
    op add @counter @counter jump

    # draw_clear
    draw clear rs1 a1 a2
    jump end_instruction always
    # draw_color
    draw color rs1 a1 a2 a3
    jump end_instruction always
    # draw_col
    op mul rs1 rs1 %00000001
    jump MLOGDRAW_draw_col always
    # draw_stroke
    draw stroke rs1
    jump end_instruction always
    # draw_line
    draw line rs1 a1 a2 a3
    jump end_instruction always
    # draw_rect
    draw rect rs1 a1 a2 a3
    jump end_instruction always
    # draw_lineRect
    draw lineRect rs1 a1 a2 a3
    jump end_instruction always
    # draw_poly
    draw poly rs1 a1 a2 a3 a4
    jump end_instruction always
    # draw_linePoly
    draw linePoly rs1 a1 a2 a3 a4
    jump end_instruction always
    # draw_triangle
    draw triangle rs1 a1 a2 a3 a4 a5
    jump end_instruction always
    # draw_image
    jump end_instruction greaterThanEq a2 4
    jump MLOGDRAW_draw_image always
    # draw_print
    draw print rs1 a1 topLeft
    jump end_instruction always
    # draw_translate
    draw translate rs1 a1
    jump end_instruction always
    # draw_scale
    draw scale rs1 a1
    jump end_instruction always
    # draw_rotate
    draw rotate rs1
    jump end_instruction always
    # draw_reset
    draw reset
    jump end_instruction always

MLOGDRAW_draw_col:
    draw col rs1
    jump end_instruction always

MLOGDRAW_draw_image:
    op mul a2 a2 2 # instructions per index
    op add @counter @counter a2

    lookup block image a3; jump MLOGDRAW_draw_image__end always
    lookup unit image a3; jump MLOGDRAW_draw_image__end always
    lookup item image a3; jump MLOGDRAW_draw_image__end always
    lookup liquid image a3; jump MLOGDRAW_draw_image__end always

MLOGDRAW_draw_image__end:
    draw image rs1 a1 image a4 a5
    jump end_instruction always

#% endblock contents

# disable mlogls warnings
# put this at the end of the file so it's not included in the output
# and so that if we go over the 1000 instruction limit, we can ignore the errors below this line
# {% raw %}
# preprocessor variable definitions
set {{ null
set {{UART_START_LINK}} null
set {{REGISTERS}} null
set {{CSRS}} null
set {{INCR}} null
set {{CONFIG}} null
set {{ERROR_OUTPUT}} null
set {{POWER_SWITCH}} null
set {{PAUSE_SWITCH}} null
set {{SINGLE_STEP_SWITCH}} null
set {{DISPLAY}} null
set {{UART_RX_READ}} null
set {{UART_RX_WRITE}} null
set {{UART_TX_START}} null
set {{UART_TX_READ}} null
set {{UART_TX_WRITE}} null
set {{LOOKUP_PROC_SIZE}} null
set {{ROM_BYTE_OFFSET}} null
set {{ROM_PROC_BYTES}} null
set {{RAM_PROC_VARS}} null
set {{RAM_START}} null
set {{MMIO_START}} null
set {{SYSCON}} null
# unused variables
set {{ {{
set STATE STATE
set IPT IPT
# {% endraw %}
