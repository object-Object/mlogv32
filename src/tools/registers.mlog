    setrate 1000

    draw reset
    draw color 255 255 255 255

    draw clear 0 0 0
    drawflush DISPLAY

reset:
    wait 0.00001

    set CPU processor17
    set DECODER processor18

    set REGISTERS cell1
    set CSRS processor19

    set DISPLAY display1

    read LOOKUP_PROC_SIZE CPU "LOOKUP_PROC_SIZE"
    read MEMORY_PROC_SIZE CPU "MEMORY_PROC_SIZE"

    # wait until everything is properly initialized
    jump reset strictEqual CPU null
    jump reset strictEqual DECODER null
    jump reset strictEqual REGISTERS null
    jump reset strictEqual CSRS null
    jump reset strictEqual DISPLAY null
    jump reset strictEqual LOOKUP_PROC_SIZE null
    jump reset strictEqual MEMORY_PROC_SIZE null

    set i -1
reset__find_lookup_start:
    op add i i 1
    getlink block i
    sensor type block @type
    jump reset__find_lookup_start notEqual type @micro-processor
    read type_var block "_type"
    jump reset__find_lookup_start notEqual type_var "lookup"

    set LOOKUP_START i

    set csr 0xc00
    op add ret @counter 1
    jump access_csr always
    set CSR_CYCLE variable
    
    set csr 0xc01
    op add ret @counter 1
    jump access_csr always
    set CSR_TIME variable

    set csr 0xc02
    op add ret @counter 1
    jump access_csr always
    set CSR_INSTRET variable

    set csr 0xc80
    op add ret @counter 1
    jump access_csr always
    set CSR_CYCLEH variable
    
    set csr 0xc81
    op add ret @counter 1
    jump access_csr always
    set CSR_TIMEH variable

    set csr 0xc82
    op add ret @counter 1
    jump access_csr always
    set CSR_INSTRETH variable

loop:
    set mark_ram_id 0
    draw clear 0 0 0

    read x0_zero REGISTERS 0
    read x1_ra REGISTERS 1
    read x2_sp REGISTERS 2
    read x3_gp REGISTERS 3
    read x4_tp REGISTERS 4
    read x5_t0 REGISTERS 5
    read x6_t1 REGISTERS 6
    read x7_t2 REGISTERS 7
    read x8_s0_fp REGISTERS 8
    read x9_s1 REGISTERS 9
    read x10_a0 REGISTERS 10
    read x11_a1 REGISTERS 11
    read x12_a2 REGISTERS 12
    read x13_a3 REGISTERS 13
    read x14_a4 REGISTERS 14
    read x15_a5 REGISTERS 15
    read x16_a6 REGISTERS 16
    read x17_a7 REGISTERS 17
    read x18_s2 REGISTERS 18
    read x19_s3 REGISTERS 19
    read x20_s4 REGISTERS 20
    read x21_s5 REGISTERS 21
    read x22_s6 REGISTERS 22
    read x23_s7 REGISTERS 23
    read x24_s8 REGISTERS 24
    read x25_s9 REGISTERS 25
    read x26_s10 REGISTERS 26
    read x27_s11 REGISTERS 27
    read x28_t3 REGISTERS 28
    read x29_t4 REGISTERS 29
    read x30_t5 REGISTERS 30
    read x31_t6 REGISTERS 31
    
    read cycle CSRS CSR_CYCLE
    read cycleh CSRS CSR_CYCLEH
    op shl cycleh cycleh 32
    op add cycle cycle cycleh
    
    read time CSRS CSR_TIME
    read timeh CSRS CSR_TIMEH
    op shl timeh timeh 32
    op add time time timeh
    
    read instret CSRS CSR_INSTRET
    read instreth CSRS CSR_INSTRETH
    op shl instreth instreth 32
    op add instret instret instreth

    read ipt CPU "IPT"
    read state CPU "STATE"
    read pc CPU "pc"
    read op_id CPU "op_id"
    read arg1 CPU "arg1"
    read arg2 CPU "arg2"
    read arg3 CPU "arg3"

    read __etext DECODER "__etext"
    read decode_time DECODER "DECODE_DURATION"
    op floor decode_time decode_time

    read MEMORY_X CPU "MEMORY_X"
    read MEMORY_Y CPU "MEMORY_Y"
    read MEMORY_WIDTH CPU "MEMORY_WIDTH"

    read ROM_SIZE CPU "ROM_SIZE"
    read ROM_START CPU "ROM_START"
    read ROM_END CPU "ROM_END"

    read RAM_START CPU "RAM_START"
    read RAM_END CPU "RAM_END"

    op mul ICACHE_SIZE ROM_SIZE 4
    set ICACHE_START RAM_END
    op add ICACHE_END ICACHE_START ICACHE_SIZE

    print "ROM_START\n{0}"
    set address ROM_START
    op add ret @counter 1
    jump mark_ram always

    print "ROM_END\n{0}"
    op sub address ROM_END 1
    op add ret @counter 1
    jump mark_ram always

    print "RAM_START\n{0}"
    set address RAM_START
    op add ret @counter 1
    jump mark_ram always

    print "RAM_END\n{0}"
    op sub address RAM_END 1
    op add ret @counter 1
    jump mark_ram always

    print "ICACHE_START\n{0}"
    set address ICACHE_START
    op add ret @counter 1
    jump mark_ram always

    print "ICACHE_END\n{0}"
    op sub address ICACHE_END 1
    op add ret @counter 1
    jump mark_ram always

    print "x0_zero  = {0}\n"
    set n x0_zero
    op add ret @counter 1
    jump format_hex always

    print "x1_ra    = {0}\n"
    set n x1_ra
    op add ret @counter 1
    jump format_hex always

    print "x2_sp    = {0}\n"
    set n x2_sp
    op add ret @counter 1
    jump format_hex always

    print "x3_gp    = {0}\n"
    set n x3_gp
    op add ret @counter 1
    jump format_hex always

    print "x4_tp    = {0}\n"
    set n x4_tp
    op add ret @counter 1
    jump format_hex always

    print "x5_t0    = {0}\n"
    set n x5_t0
    op add ret @counter 1
    jump format_hex always

    print "x6_t1    = {0}\n"
    set n x6_t1
    op add ret @counter 1
    jump format_hex always

    print "x7_t2    = {0}\n"
    set n x7_t2
    op add ret @counter 1
    jump format_hex always

    print "x8_s0_fp = {0}\n"
    set n x8_s0_fp
    op add ret @counter 1
    jump format_hex always

    print "x9_s1    = {0}\n"
    set n x9_s1
    op add ret @counter 1
    jump format_hex always

    print "x10_a0   = {0}\n"
    set n x10_a0
    op add ret @counter 1
    jump format_hex always

    print "x11_a1   = {0}\n"
    set n x11_a1
    op add ret @counter 1
    jump format_hex always

    print "x12_a2   = {0}\n"
    set n x12_a2
    op add ret @counter 1
    jump format_hex always

    print "x13_a3   = {0}\n"
    set n x13_a3
    op add ret @counter 1
    jump format_hex always

    print "x14_a4   = {0}\n"
    set n x14_a4
    op add ret @counter 1
    jump format_hex always

    print "x15_a5   = {0}\n"
    set n x15_a5
    op add ret @counter 1
    jump format_hex always

    draw print 7 508 topLeft
    drawflush DISPLAY

    print "x16_a6   = {0}\n"
    set n x16_a6    
    op add ret @counter 1
    jump format_hex always

    print "x17_a7   = {0}\n"
    set n x17_a7
    op add ret @counter 1
    jump format_hex always

    print "x18_s2   = {0}\n"
    set n x18_s2
    op add ret @counter 1
    jump format_hex always

    print "x19_s3   = {0}\n"
    set n x19_s3
    op add ret @counter 1
    jump format_hex always

    print "x20_s4   = {0}\n"
    set n x20_s4
    op add ret @counter 1
    jump format_hex always

    print "x21_s5   = {0}\n"
    set n x21_s5
    op add ret @counter 1
    jump format_hex always

    print "x22_s6   = {0}\n"
    set n x22_s6
    op add ret @counter 1
    jump format_hex always

    print "x23_s7   = {0}\n"
    set n x23_s7
    op add ret @counter 1
    jump format_hex always

    print "x24_s8   = {0}\n"
    set n x24_s8
    op add ret @counter 1
    jump format_hex always

    print "x25_s9   = {0}\n"
    set n x25_s9
    op add ret @counter 1
    jump format_hex always

    print "x26_s10  = {0}\n"
    set n x26_s10
    op add ret @counter 1
    jump format_hex always

    print "x27_s11  = {0}\n"
    set n x27_s11
    op add ret @counter 1
    jump format_hex always

    print "x28_t3   = {0}\n"
    set n x28_t3
    op add ret @counter 1
    jump format_hex always

    print "x29_t4   = {0}\n"
    set n x29_t4
    op add ret @counter 1
    jump format_hex always

    print "x30_t5   = {0}\n"
    set n x30_t5
    op add ret @counter 1
    jump format_hex always

    print "x31_t6   = {0}\n\n"
    set n x31_t6
    op add ret @counter 1
    jump format_hex always

    print "cycle   = {0}\n"
    format cycle

    print "time    = {0}\n"
    format time

    print "instret = {0}\n"
    format instret

    draw print 7 300 topLeft
    drawflush DISPLAY

    print "@ipt        = {0}\n"
    format ipt

    print "state       = {0}\n"
    format state
    format ipt

    print "__etext     = {0}\n"
    set n __etext
    op add ret @counter 1
    jump format_hex always

    print "decode_time = {0} ms\n\n"
    format decode_time

    print "pc    = {0}\n"
    set n pc
    op add ret @counter 1
    jump format_hex always

    print "op_id = {0}\n"
    set n op_id
    op add ret @counter 1
    jump format_op_id always

    print "arg1  = {0}\n"
    format arg1

    print "arg2  = {0}\n"
    format arg2

    print "arg3  = {0}\n"
    format arg3

    draw print 256 508 topLeft
    drawflush DISPLAY

    wait 0.025
    jump loop always

format_hex:
    op floor n n
format_hex__loop:
    op mod digit n 16
    op mul skip digit 2
    op add @counter @counter skip
    format "{0}0"
    jump format_hex__next always
    format "{0}1"
    jump format_hex__next always
    format "{0}2"
    jump format_hex__next always
    format "{0}3"
    jump format_hex__next always
    format "{0}4"
    jump format_hex__next always
    format "{0}5"
    jump format_hex__next always
    format "{0}6"
    jump format_hex__next always
    format "{0}7"
    jump format_hex__next always
    format "{0}8"
    jump format_hex__next always
    format "{0}9"
    jump format_hex__next always
    format "{0}A"
    jump format_hex__next always
    format "{0}B"
    jump format_hex__next always
    format "{0}C"
    jump format_hex__next always
    format "{0}D"
    jump format_hex__next always
    format "{0}E"
    jump format_hex__next always
    format "{0}F"
format_hex__next:
    op shr n n 4
    jump format_hex__loop greaterThan n 0
    format "0x"
    set @counter ret

format_bin:
    set i 0
    op floor n n
format_bin__loop:
    op mod digit n 2
    op mul skip digit 2
    op add @counter @counter skip
    format "{0}0"
    jump format_bin__next always
    format "{0}1"
format_bin__next:
    op shr n n 1
    op add i i 1
    jump format_bin__loop lessThan i 32
    format "0b"
    set @counter ret

format_op_id:
    jump format_op_id__unknown greaterThan n 46
    op mul n n 2
    op add @counter @counter n
    format "illegal_instruction"; set @counter ret
    format "LUI"; set @counter ret
    format "AUIPC"; set @counter ret
    format "JAL"; set @counter ret
    format "JALR"; set @counter ret
    format "BEQ"; set @counter ret
    format "BNE"; set @counter ret
    format "BLT"; set @counter ret
    format "BGE"; set @counter ret
    format "BLTU"; set @counter ret
    format "BGEU"; set @counter ret
    format "LB"; set @counter ret
    format "LH"; set @counter ret
    format "LW"; set @counter ret
    format "LBU"; set @counter ret
    format "LHU"; set @counter ret
    format "SB"; set @counter ret
    format "SH"; set @counter ret
    format "SW"; set @counter ret
    format "ADDI"; set @counter ret
    format "SLTI"; set @counter ret
    format "SLTIU"; set @counter ret
    format "XORI"; set @counter ret
    format "ORI"; set @counter ret
    format "ANDI"; set @counter ret
    format "SLLI"; set @counter ret
    format "SRLI"; set @counter ret
    format "SRAI"; set @counter ret
    format "ADD"; set @counter ret
    format "SUB"; set @counter ret
    format "SLL"; set @counter ret
    format "SLT"; set @counter ret
    format "SLTU"; set @counter ret
    format "XOR"; set @counter ret
    format "SRL"; set @counter ret
    format "SRA"; set @counter ret
    format "OR"; set @counter ret
    format "AND"; set @counter ret
    format "FENCE"; set @counter ret
    format "PRIV"; set @counter ret
    format "CSRRW"; set @counter ret
    format "CSRRS"; set @counter ret
    format "CSRRC"; set @counter ret
    format "CSRRWI"; set @counter ret
    format "CSRRSI"; set @counter ret
    format "CSRRCI"; set @counter ret
format_op_id__unknown:
    format n; set @counter ret

# get the variable name in CSRS for the specified CSR
# csr -> variable
access_csr:
    op idiv _lookup csr LOOKUP_PROC_SIZE
    op add _lookup _lookup LOOKUP_START
    getlink _lookup _lookup

    op mod variable csr LOOKUP_PROC_SIZE
    lookup block variable variable
    sensor variable variable @name
    read variable _lookup variable

    set @counter ret

# creates a marker on the ram proc containing a given address
# the caller should print a format string with a placeholder for the address
# address ->
mark_ram:
    set mark_ram__ret ret

    # we store 4 bytes in each value
    op idiv _address address 4

    # get the ram proc containing this address
    op idiv _ram_index _address MEMORY_PROC_SIZE

    op mod _ram_x _ram_index MEMORY_WIDTH
    op add _ram_x _ram_x MEMORY_X

    op idiv _ram_y _ram_index MEMORY_WIDTH
    op add _ram_y _ram_y MEMORY_Y

    set n address
    op add ret @counter 1
    jump format_hex always

    setmarker remove mark_ram_id
    makemarker shapeText mark_ram_id _ram_x _ram_y false
    setmarker shape 0 4 0 0
    setmarker flushText mark_ram_id false

    op add mark_ram_id mark_ram_id 1
    set @counter mark_ram__ret
