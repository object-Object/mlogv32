#% extends 'main.constants.jinja'
#% block contents

# this processor performs the following one-time initialization steps:
# - disable RAM procs to reduce lag
# - initialize INCR using a lookup table
# - set readonly CSR values
# - reset all UART FIFO pointers to 0

# the lookup table must be linked first

    set EXPECTED_LINKS 21

    # wait until ready
reset:
    jump reset lessThan @links EXPECTED_LINKS
    
    set INCR processor17
    read type INCR "_type"
    jump reset equal type "lookup" # sanity check

    set CSRS processor18
    set CPU processor19
    set UART0 bank1
    set UART1 bank2
    set UART2 bank3
    set UART3 bank4

    op div wait {{LOOKUP_PROC_SIZE}} 120 # micro proc instructions/sec
    op ceil wait wait
    wait wait

    setrate 1000

    # disable RAM procs

    read MEMORY_X CPU "MEMORY_X"
    read MEMORY_Y CPU "MEMORY_Y"
    read MEMORY_WIDTH CPU "MEMORY_WIDTH"
    read ROM_SIZE CPU "ROM_SIZE"
    read RAM_SIZE CPU "RAM_SIZE"
    read ICACHE_SIZE CPU "ICACHE_SIZE"
    
    op idiv RAM_START_PROC ROM_SIZE {{ROM_PROC_BYTES}}

    op add RAM_END_PROC RAM_SIZE ICACHE_SIZE
    op idiv RAM_END_PROC RAM_END_PROC {{RAM_PROC_BYTES}}
    op add RAM_END_PROC RAM_END_PROC RAM_START_PROC

    set i 0
disable_ram:
    op mod x i MEMORY_WIDTH
    op add x x MEMORY_X

    op idiv y i MEMORY_WIDTH
    op add y y MEMORY_Y

    getblock building ram x y

    op lessThan enabled i RAM_START_PROC
    control enabled ram enabled

    op add i i 1
    jump disable_ram lessThan i RAM_END_PROC

    # initialize INCR

    set address 0
    op add ret @counter 1
    jump lookup_variable always
    set prev_variable variable

    set address 1
init_incr:
    set variable null
    op add ret @counter 1
    jump lookup_variable lessThan address {{RAM_PROC_VARS}}

    write variable INCR prev_variable
    set prev_variable variable
    op add address address 1
    jump init_incr lessThanEq address {{RAM_PROC_VARS}}

    # initialize CSRS

    # misa
    # XLEN=32 --
    # 0         ----
    # ISA           ZYXWVUTSRQPONMLKJIHGFEDCBA
    write   0b01000000100100000001000100000001 CSRS "{{ 'misa'|csr }}"

    # mlogv32 only has one hart, so mhartid is required to be zero
    write 0 CSRS "{{ 'mhartid'|csr }}"

    # unimplemented CSRs
    write 0 CSRS "{{ 'mvendorid'|csr }}"
    write 0 CSRS "{{ 'marchid'|csr }}"
    write 0 CSRS "{{ 'mimpid'|csr }}"

    # default values for writable CSRs
    write 0 CSRS "{{ 'mepc'|csr }}"
    write 0 CSRS "{{ 'mscratch'|csr }}"
    write 0 CSRS "{{ 'mcause'|csr }}"
    write 0 CSRS "{{ 'mtval'|csr }}"

    # init UARTs
    write 0 UART0 {{UART_RX_READ}}
    write 0 UART0 {{UART_RX_WRITE}}
    write 0 UART0 {{UART_TX_READ}}
    write 0 UART0 {{UART_TX_WRITE}}
    write 0 UART1 {{UART_RX_READ}}
    write 0 UART1 {{UART_RX_WRITE}}
    write 0 UART1 {{UART_TX_READ}}
    write 0 UART1 {{UART_TX_WRITE}}
    write 0 UART2 {{UART_RX_READ}}
    write 0 UART2 {{UART_RX_WRITE}}
    write 0 UART2 {{UART_TX_READ}}
    write 0 UART2 {{UART_TX_WRITE}}
    write 0 UART3 {{UART_RX_READ}}
    write 0 UART3 {{UART_RX_WRITE}}
    write 0 UART3 {{UART_TX_READ}}
    write 0 UART3 {{UART_TX_WRITE}}

    setrate 1
    stop

# given a value 0 <= address < RAM_PROC_SIZE, resolve that variable in the lookup table
# address -> variable
lookup_variable:
    op idiv _lookup address {{LOOKUP_PROC_SIZE}}
    getlink _lookup _lookup

    op mod variable address {{LOOKUP_PROC_SIZE}}
    lookup block variable variable
    sensor variable variable @name
    read variable _lookup variable

    set @counter ret

#% endblock contents

# {% raw %}
# preprocessor variable definitions
set {{LOOKUP_PROC_SIZE}} null
set {{ROM_PROC_BYTES}} null
set {{RAM_PROC_BYTES}} null
set {{RAM_PROC_VARS}} null
set {{UART_RX_READ}} null
set {{UART_RX_WRITE}} null
set {{UART_TX_READ}} null
set {{UART_TX_WRITE}} null
# {% endraw %}
