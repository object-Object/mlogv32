    # per-world config options for mlogv32

    # reloaded after unpausing
    set TARGET_IPT {{#TARGET_IPT}}
    set BREAKPOINT_ADDRESS {{#BREAKPOINT_ADDRESS}}

    # loaded at reset only
    set MEMORY_X_OFFSET {{#MEMORY_X_OFFSET}}  # x offset from this proc to bottom left memory proc
    set MEMORY_Y_OFFSET {{#MEMORY_Y_OFFSET}}  # y offset from this proc to bottom left memory proc
    set MEMORY_WIDTH {{#MEMORY_WIDTH}}  # physical width of the memory procs

    set ROM_SIZE    {{# '%#0x'|format(ROM_ROWS * MEMORY_WIDTH * 16384) }}  # ROM size in bytes (rx)
    set RAM_SIZE    {{# '%#0x'|format(RAM_ROWS * MEMORY_WIDTH * 16384) }}  # RAM size in bytes (rwx)
    set ICACHE_SIZE {{# '%#0x'|format(ICACHE_ROWS * MEMORY_WIDTH * 4096) }}  # icache size in variables, or bytes of memory it can represent; 4x less dense than ROM/RAM

    set UART_FIFO_CAPACITY {{#UART_FIFO_CAPACITY}}  # UART TX/RX FIFO capacity in bytes (max 253)

    # computed values
    op add MEMORY_X @thisx MEMORY_X_OFFSET  # absolute x position of bottom left memory proc
    op add MEMORY_Y @thisy MEMORY_Y_OFFSET  # absolute y position of bottom left memory proc
    op add UART_FIFO_MODULO UART_FIFO_CAPACITY 1  # actual number of indices used for each FIFO, keeping one empty to check if the buffer is full (max 254)

    stop

#%- if false
# {% raw %}
set {{ null
set TARGET_IPT TARGET_IPT
set BREAKPOINT_ADDRESS BREAKPOINT_ADDRESS
set MEMORY_WIDTH MEMORY_WIDTH
set ROM_SIZE ROM_SIZE
set RAM_SIZE RAM_SIZE
set ICACHE_SIZE ICACHE_SIZE
set UART_FIFO_MODULO UART_FIFO_MODULO
set MEMORY_X MEMORY_X
set MEMORY_Y MEMORY_Y
# {% endraw %}
#% endif
