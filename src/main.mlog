    # constants
    set LOOKUP_LINKS 16  # number of ram variable lookup processors
    set LOOKUP_PROC_SIZE 260  # number of variables per lookup proc
    set MEMORY_PROC_SIZE 4096  # number of variables (not bytes) per memory proc
    
reset:
    # linked buildings
    set DECODER processor17

    set REGISTERS cell1
    set CSRS processor18
    set INCR processor19
    set CONFIG processor20

    set ERROR_OUTPUT message1
    set RESET_SWITCH switch1
    set PAUSE_SWITCH switch2
    set SINGLE_STEP_SWITCH switch3

    set DISPLAY display1

    # load config
    read IPT CONFIG "IPT"
    read MEMORY_X CONFIG "MEMORY_X"
    read MEMORY_Y CONFIG "MEMORY_Y"
    read MEMORY_WIDTH CONFIG "MEMORY_WIDTH"
    read ROM_SIZE CONFIG "ROM_SIZE"
    read RAM_SIZE CONFIG "RAM_SIZE"

    set ROM_START 0x0  # inclusive
    op add ROM_END ROM_START ROM_SIZE  # exclusive

    set RAM_START ROM_END  # inclusive
    op add RAM_END RAM_START RAM_SIZE  # exclusive

    set MEMORY_END RAM_END
    op idiv MEMORY_END_INDEX MEMORY_END 4

    # loop until the reset switch is linked and disabled
    jump reset strictEqual RESET_SWITCH null
    sensor enabled RESET_SWITCH @enabled
    jump reset equal enabled true

    # initialization

    # ipt go brrrr
    setrate IPT

    # initialize peripherals
    control enabled PAUSE_SWITCH false

    printflush ERROR_OUTPUT

    draw clear 0 0 0
    drawflush DISPLAY

    # reset exit code (for debug output)
    set exit_code null

    # find the index of the first linked lookup proc
    # NOTE: the lookup procs must be linked in a contiguous group
    # eg. if you link lookup procs, then a switch, then want to add more lookup procs, you need to replace the proc and re-link everything
    # also, things may fail if the lookups haven't been given enough time to initialize, so do that first
    set i -1
reset__find_lookup_start:
    op add i i 1
    getlink block i
    sensor type block @type
    jump reset__find_lookup_start notEqual type @micro-processor
    read type_var block "_type"
    jump reset__find_lookup_start notEqual type_var "lookup"

    set LOOKUP_START i

    # hack
    read prev_lookup_index block "_index"
    op sub prev_lookup_index prev_lookup_index 1

    # validate the number of linked lookup procs
reset__find_lookup_size:
    read lookup_index block "_index"
    op sub delta lookup_index prev_lookup_index
    jump invalid_lookup_link_order notEqual delta 1
    set prev_lookup_index lookup_index

    op add i i 1
    getlink block i
    sensor type block @type
    jump reset__done_find_lookup_size notEqual type @micro-processor
    read type_var block "_type"
    jump reset__find_lookup_size equal type_var "lookup"

reset__done_find_lookup_size:
    op sub lookup_links i LOOKUP_START
    jump invalid_lookup_link_order notEqual lookup_links LOOKUP_LINKS

    # look up commonly used CSRs
    set csr 0xc00
    op add ret @counter 1
    jump access_csr always
    set CSR_CYCLE variable
    
    set csr 0xc01
    op add ret @counter 1
    jump access_csr always
    set CSR_TIME variable

    set csr 0xc02
    op add ret @counter 1
    jump access_csr always
    set CSR_INSTRET variable

    set csr 0xc80
    op add ret @counter 1
    jump access_csr always
    set CSR_CYCLEH variable
    
    set csr 0xc81
    op add ret @counter 1
    jump access_csr always
    set CSR_TIMEH variable

    set csr 0xc82
    op add ret @counter 1
    jump access_csr always
    set CSR_INSTRETH variable

    # zero all of the registers
    set i 0
reset__zero_registers:
    write 0 REGISTERS i
    op add i i 1
    jump reset__zero_registers lessThan i 32

    # initialize INCR by abusing access_csr
    set csr 0
    op add ret @counter 1
    jump access_csr always
    set prev_variable variable

    set csr 1
reset__init_incr_proc:
    set variable null
    op add ret @counter 1
    jump access_csr lessThan csr MEMORY_PROC_SIZE

    write variable INCR prev_variable
    set prev_variable variable
    op add csr csr 1
    jump reset__init_incr_proc lessThanEq csr MEMORY_PROC_SIZE

    # start executing code at address 4
    # (address 0 is __etext)
    set pc 4
    set opcache_var null

    # reset cycle/time/instret
    write 0 CSRS CSR_CYCLE
    write 0 CSRS CSR_CYCLEH
    write 0 CSRS CSR_TIME
    write 0 CSRS CSR_TIMEH
    write 0 CSRS CSR_INSTRET
    write 0 CSRS CSR_INSTRETH
    set instret 0

    # transfer control to the decoder
reset__wait_for_decoder:
    wait 0.00001
    read decoder_state DECODER "STATE"
    jump reset__wait_for_decoder notEqual decoder_state "ready"

    read counter DECODER "@counter"
    op add counter counter 1
    write counter DECODER "@counter"

    set STATE "decoding" # for debug output
    stop
    set STATE "running"

    # start cycle timer
    set next_time_update @time
    set RESET_TIME @time
    set RESET_TICK @tick

main:
    # update time/cycle
    jump main__skip_time_update lessThan @time next_time_update
    op add next_time_update @time 1
    op add ret @counter 1
    jump update_time_and_cycle always
main__skip_time_update:

    # get the current instruction cache processor and variable
    jump access_opcache strictEqual opcache_var null
done_access_opcache:

    # load instruction and arguments
    read op_id opcache opcache_var
    read opcache_var INCR opcache_var
    read arg1 opcache opcache_var
    read opcache_var INCR opcache_var
    read arg2 opcache opcache_var
    read opcache_var INCR opcache_var
    read arg3 opcache opcache_var
    read opcache_var INCR opcache_var
    
    # pause if in single-stepping mode
    sensor enabled SINGLE_STEP_SWITCH @enabled
    jump pause_step equal enabled true
unpause_step:

    # jump to instruction handler
    # TODO: we could save one cycle by using a symbol table, but that would make updating the code a pain
    op add @counter @counter op_id

    jump illegal_instruction always
    jump LUI always
    jump AUIPC always
    jump JAL always
    jump JALR always
    jump BEQ always
    jump BNE always
    jump BLT always
    jump BGE always
    jump BLTU always
    jump BGEU always
    jump LB always
    jump LH always
    jump LW always
    jump LBU always
    jump LHU always
    jump SB always
    jump SH always
    jump SW always
    jump ADDI always
    jump SLTI always
    jump SLTIU always
    jump XORI always
    jump ORI always
    jump ANDI always
    jump SLLI always
    jump SRLI always
    jump SRAI always
    jump ADD always
    jump SUB always
    jump SLL always
    jump SLT always
    jump SLTU always
    jump XOR always
    jump SRL always
    jump SRA always
    jump OR always
    jump AND always
    jump FENCE always
    jump ECALL always
    jump EBREAK always
    jump CSRRW always
    jump CSRRS always
    jump CSRRC always
    jump CSRRWI always
    jump CSRRSI always
    jump CSRRCI always

# all instructions jump here after completing successfully
end_instruction:
    # increment instret
    op add instret instret 1
    jump end_instruction__no_overflow lessThan instret 0x100000000

    set instret 0

    read high CSRS CSR_INSTRETH
    op add high high 1
    write high CSRS CSR_INSTRETH

end_instruction__no_overflow:
    write instret CSRS CSR_INSTRET

end_instruction_preserve_instret:
    op add pc pc 4

end_instruction_preserve_pc:
    # halt if the reset switch was manually enabled
    sensor enabled RESET_SWITCH @enabled
    jump main notEqual enabled true
    jump halt always

# exceptions

invalid_lookup_link_order:
    print "Invalid ROM proc lookup link order! Lookups must be linked to the processor in one contiguous chunk in the order specified by the _index variable."
    printflush ERROR_OUTPUT
    jump halt always

illegal_instruction:
    print "Illegal instruction!"
    printflush ERROR_OUTPUT
    jump halt always

illegal_syscall:
    print "Illegal syscall!"
    printflush ERROR_OUTPUT
    jump halt always

instruction_address_misaligned:
    print "Instruction address misaligned!"
    printflush ERROR_OUTPUT
    jump halt always

misaligned_load:
    print "Attempted misaligned load!"
    printflush ERROR_OUTPUT
    jump halt always

misaligned_store:
    print "Attempted misaligned store!"
    printflush ERROR_OUTPUT
    jump halt always

inaccessible_load:
    print "Attempted to load from an inaccessible address!"
    printflush ERROR_OUTPUT
    jump halt always

inaccessible_store:
    print "Attempted to store to an inaccessible address!"
    printflush ERROR_OUTPUT
    jump halt always

# pause/halt

# enable the reset switch, wait until it's disabled, then reset the processor
halt:
    op add ret @counter 1
    jump update_time_and_cycle always

    control enabled RESET_SWITCH true
    jump reset always

# we jump here at the start of the main loop if opcache_var is null
access_opcache:
    jump inaccessible_load greaterThanEq pc ROM_SIZE

    op add _address MEMORY_END_INDEX pc
    op add access_ram__ret @counter 1
    jump access_ram_raw always

    set opcache ram
    set opcache_var variable

    jump done_access_opcache always

# we jump here after instruction fetch if the single-step switch is enabled
pause_step:
    op add ret @counter 1
    jump update_time_and_cycle always

    control enabled PAUSE_SWITCH true
    set pause_step_tick @tick

pause_step__loop:
    sensor enabled RESET_SWITCH @enabled
    jump halt equal reset_enabled true
    sensor enabled PAUSE_SWITCH @enabled
    jump pause_step__loop equal enabled true

    # move RESET_TICK forward by the amount of time we were paused for
    # this should have the effect of pausing cycle while paused here
    op sub delta @tick pause_step_tick
    op add RESET_TICK RESET_TICK delta

    op add ret @counter 1
    jump update_time_and_cycle always

    jump unpause_step always

# helper functions

# update the time/timeh and cycle/cycleh CSRs
# TODO: we could theoretically only update these when they're actually being read, but that would look weird on a debugger
update_time_and_cycle:
    # update time
    op sub time @time RESET_TIME
    op floor time time

    op mod low time 0x100000000
    op shr high time 32

    write low CSRS CSR_TIME
    write high CSRS CSR_TIMEH

    # update cycle
    # we define the number of cycles as "@ipt * ticks since reset"
    # this should be a decent estimation of the number of mlog instructions executed since reset
    op sub cycle @tick RESET_TICK
    op mul cycle cycle @ipt
    op floor cycle cycle

    op mod low cycle 0x100000000
    op shr high cycle 32

    write low CSRS CSR_CYCLE
    write high CSRS CSR_CYCLEH

    set @counter ret

# sign extension function
# value, length -> result
extend_sign:
    # https://graphics.stanford.edu/~seander/bithacks.html#VariableSignExtend
    op sub _mask length 1
    op shl _mask 1 _mask

    op xor result value _mask
    op sub result result _mask
    op and result result 0xffffffff # convert signed to unsigned

    set @counter ret

# converts a pair of two's complement unsigned values to signed, or vice versa
# this converts two values at once because every usage of it needs to convert two values
# value1, value2 -> result1, result2
swap_signedness:
    # value1 < 2^31 ? (value1 + 2^32) % 2^32 : value1 - 2^32
    jump swap_signedness__s2u_1 lessThan value1 0x80000000 # 2^31
    op sub result1 value1 0x100000000 # 2^32
    jump swap_signedness__done_1 always
swap_signedness__s2u_1:
    op add result1 value1 0x100000000
    op mod result1 result1 0x100000000
swap_signedness__done_1:

    jump swap_signedness__s2u_2 lessThan value2 0x80000000
    op sub result2 value2 0x100000000
    jump swap_signedness__done_2 always
swap_signedness__s2u_2:
    op add result2 value2 0x100000000
    op mod result2 result2 0x100000000
swap_signedness__done_2:

    set @counter ret

# helper function to find the ram proc and variable for a given address
# address -> ram, variable
access_ram:
    # we store 4 bytes in each value
    op idiv _address address 4

access_ram_raw:
    # get the ram proc containing this address
    op idiv _ram_index _address MEMORY_PROC_SIZE

    op mod _ram_x _ram_index MEMORY_WIDTH
    op add _ram_x _ram_x MEMORY_X

    op idiv _ram_y _ram_index MEMORY_WIDTH
    op add _ram_y _ram_y MEMORY_Y

    getblock building ram _ram_x _ram_y

    # get the variable within the ram proc containing this address
    op mod _address _address MEMORY_PROC_SIZE
    
    op idiv _lookup _address LOOKUP_PROC_SIZE
    op add _lookup _lookup LOOKUP_START
    getlink _lookup _lookup

    op mod variable _address LOOKUP_PROC_SIZE
    lookup block variable variable
    sensor variable variable @name
    read variable _lookup variable

    set @counter access_ram__ret

# get the variable name in CSRS for the specified CSR, and also check if it's read-only
# csr -> variable, readonly
access_csr:
    op idiv _lookup csr LOOKUP_PROC_SIZE
    op add _lookup _lookup LOOKUP_START
    getlink _lookup _lookup

    op mod variable csr LOOKUP_PROC_SIZE
    lookup block variable variable
    sensor variable variable @name
    read variable _lookup variable

    # the top two bits of csr indicate whether the register is read/write (00, 01, 10) or read-only (11)
    op and readonly csr 0b110000000000
    op equal readonly readonly 0b110000000000

    set @counter ret

# loads the word from memory that contains the specified address
# address -> result
load_word:
    jump inaccessible_load greaterThanEq address MEMORY_END

    # locate and read value from ram
    op add access_ram__ret @counter 1
    jump access_ram always
    read value ram variable
    # null is coerced to 0 by swap_endianness

    # tail call, swap_endianness will jump to the ret value of load_word's caller

# converts a little endian 32-bit number to big endian, or vice versa
# https://stackoverflow.com/a/2182184
# this MUST stay directly after load_word
# value -> result
swap_endianness:
    # byte 3 -> byte 0
    op shr result value 24
    op and result result 0xff

    # byte 1 -> byte 2
    op shl _tmp value 8
    op and _tmp _tmp 0xff0000
    op or result result _tmp

    # byte 2 -> byte 1
    op shr _tmp value 8
    op and _tmp _tmp 0xff00
    op or result result _tmp

    # byte 0 -> byte 3
    op shl _tmp value 24
    op and _tmp _tmp 0xff000000
    op or result result _tmp

    set @counter ret

# loads a value with a specified length in bits (8, 16, or 32) from memory
# raises a misaligned-load exception if the address is misaligned for the specified length
# address, length, is_signed -> result
load_value:
    set load_value__ret ret

    # truncate address, because every caller needs to do it anyway
    op mod address address 0x100000000 # 2^32 (trunc 32)

    # check alignment
    op idiv _bytes length 8
    op mod _alignment address _bytes
    jump misaligned_load notEqual _alignment 0

    # load the word containing the address
    op add ret @counter 1
    jump load_word always

    # right shift by (address % 4) bits
    op mod _shift address 4
    op mul _shift _shift 8
    op shr result result _shift

    # truncate to the specified number of bits
    op pow _divisor 2 length
    op mod result result _divisor

    # extend the sign of the value if it's signed
    set value result
    set ret load_value__ret
    jump extend_sign equal is_signed true # tail call

    set @counter load_value__ret

# stores a word to memory at the specified address
# NOTE: does not perform an alignment check
# address, value ->
store_word:
    jump inaccessible_store lessThan address RAM_START
    jump inaccessible_store greaterThanEq address RAM_END

    set store_word__ret ret
    
    op add ret @counter 1
    jump swap_endianness always

    op add access_ram__ret @counter 1
    jump access_ram always
    write result ram variable

    set @counter store_word__ret

# stores a value with a specified length in bits (8, 16, or 32) to memory
# raises a misaligned-store exception if the address is misaligned for the specified length
# address, value, length ->
store_value:
    set store_value__ret ret

    # truncate address, because every caller needs to do it anyway
    op mod address address 0x100000000 # 2^32 (trunc 32)
    jump inaccessible_store lessThan address RAM_START
    jump inaccessible_store greaterThanEq address RAM_END

    # check alignment
    op idiv _bytes length 8
    op mod _alignment address _bytes
    jump misaligned_store notEqual _alignment 0

    # take the low n bits of the value to store, and shift it to line up with the zeros in the mask (big endian)
    op mod _shift address 4
    op mul _shift _shift 8

    op pow _length_squared 2 length
    op mod value value _length_squared
    op shl value value _shift

    # convert the value to little endian
    op add ret @counter 1
    jump swap_endianness always

    # create a bitmask with 0 in the section we want to replace and 1 everywhere else (little endian)
    op sub _shift 24 _shift
    op idiv _shift _shift length
    op mul _shift _shift length

    op sub _bitmask _length_squared 1
    op shl _bitmask _bitmask _shift
    op sub _bitmask 0xffffffff _bitmask

    # load the word containing the address
    op add access_ram__ret @counter 1
    jump access_ram always
    read _word ram variable

    # insert the value into the word
    op and _word _word _bitmask
    op add result result _word

    # store the new value
    write result ram variable

    set @counter store_value__ret

# instruction handlers

LUI:
    # U-type: arg1=rd, arg2=imm
    jump end_instruction equal arg1 0
    write arg2 REGISTERS arg1
    jump end_instruction always

AUIPC:
    # U-type: arg1=rd, arg2=imm
    jump end_instruction equal arg1 0

    op add result arg2 pc
    op mod result result 0x100000000 # trunc 32
    write result REGISTERS arg1

    jump end_instruction always

JAL:
    # J-type: arg1=rd, arg2=imm
    op add target pc arg2

jump_to_target:
    op mod target target 0x100000000 # trunc 32

    op mod remainder target 4
    jump instruction_address_misaligned notEqual remainder 0

    jump jump_to_target__no_write equal arg1 0

    op add result pc 4
    op mod result result 0x100000000 # trunc 32
    write result REGISTERS arg1

jump_to_target__no_write:
    set pc target
    set opcache_var null
    jump end_instruction_preserve_pc always

JALR:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    read rs1 REGISTERS arg2
    op add target rs1 arg3
    jump jump_to_target always

BEQ:
    # B-type: arg1=rs1, arg2=rs2, arg3=imm
    read rs1 REGISTERS arg1
    read rs2 REGISTERS arg2
    op add target pc arg3
    set arg1 0
    jump jump_to_target equal rs1 rs2
    jump end_instruction always

BNE:
    # B-type: arg1=rs1, arg2=rs2, arg3=imm
    read rs1 REGISTERS arg1
    read rs2 REGISTERS arg2
    op add target pc arg3
    set arg1 0
    jump jump_to_target notEqual rs1 rs2
    jump end_instruction always

BLT:
    # B-type: arg1=rs1, arg2=rs2, arg3=imm
    read value1 REGISTERS arg1
    read value2 REGISTERS arg2
    op add ret @counter 1
    jump swap_signedness always

    op add target pc arg3
    set arg1 0
    jump jump_to_target lessThan result1 result2
    jump end_instruction always

BGE:
    # B-type: arg1=rs1, arg2=rs2, arg3=imm
    read value1 REGISTERS arg1
    read value2 REGISTERS arg2
    op add ret @counter 1
    jump swap_signedness always

    op add target pc arg3
    set arg1 0
    jump jump_to_target greaterThanEq result1 result2
    jump end_instruction always

BLTU:
    # B-type: arg1=rs1, arg2=rs2, arg3=imm
    read rs1 REGISTERS arg1
    read rs2 REGISTERS arg2
    op add target pc arg3
    set arg1 0
    jump jump_to_target lessThan rs1 rs2
    jump end_instruction always

BGEU:
    # B-type: arg1=rs1, arg2=rs2, arg3=imm
    read rs1 REGISTERS arg1
    read rs2 REGISTERS arg2
    op add target pc arg3
    set arg1 0
    jump jump_to_target greaterThanEq rs1 rs2
    jump end_instruction always

LB:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    read rs1 REGISTERS arg2

    op add address rs1 arg3
    set length 8
    set is_signed true
    op add ret @counter 1
    jump load_value always

    jump end_instruction equal arg1 0
    write result REGISTERS arg1
    jump end_instruction always

LH:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    read rs1 REGISTERS arg2

    op add address rs1 arg3
    set length 16
    set is_signed true
    op add ret @counter 1
    jump load_value always

    jump end_instruction equal arg1 0
    write result REGISTERS arg1
    jump end_instruction always

LW:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    read rs1 REGISTERS arg2

    op add address rs1 arg3
    set length 32
    set is_signed false
    op add ret @counter 1
    jump load_value always

    jump end_instruction equal arg1 0
    write result REGISTERS arg1
    jump end_instruction always

LBU:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    read rs1 REGISTERS arg2

    op add address rs1 arg3
    set length 8
    set is_signed false
    op add ret @counter 1
    jump load_value always

    jump end_instruction equal arg1 0
    write result REGISTERS arg1
    jump end_instruction always

LHU:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    read rs1 REGISTERS arg2

    op add address rs1 arg3
    set length 16
    set is_signed false
    op add ret @counter 1
    jump load_value always

    jump end_instruction equal arg1 0
    write result REGISTERS arg1
    jump end_instruction always

SB:
    # S-type: arg1=rs1, arg2=rs2, arg3=imm
    read rs1 REGISTERS arg1
    read value REGISTERS arg2

    op add address rs1 arg3
    set length 8
    op add ret @counter 1
    jump store_value always
    jump end_instruction always

SH:
    # S-type: arg1=rs1, arg2=rs2, arg3=imm
    read rs1 REGISTERS arg1
    read value REGISTERS arg2

    op add address rs1 arg3
    set length 16
    op add ret @counter 1
    jump store_value always
    jump end_instruction always

SW:
    # S-type: arg1=rs1, arg2=rs2, arg3=imm
    read rs1 REGISTERS arg1
    read value REGISTERS arg2

    op add address rs1 arg3
    set length 32
    op add ret @counter 1
    jump store_value always
    jump end_instruction always

ADDI:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    jump end_instruction equal arg1 0

    read rs1 REGISTERS arg2

    op add result rs1 arg3
    op mod result result 0x100000000 # 2^32 (trunc 32)
    write result REGISTERS arg1

    jump end_instruction always

SLTI:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    jump end_instruction equal arg1 0

    read value1 REGISTERS arg2
    set value2 arg3
    op add ret @counter 1
    jump swap_signedness always

    op lessThan result result1 result2
    write result REGISTERS arg1

    jump end_instruction always

SLTIU:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    jump end_instruction equal arg1 0

    read rs1 REGISTERS arg2

    op lessThan result rs1 arg3
    write result REGISTERS arg1

    jump end_instruction always

XORI:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    jump end_instruction equal arg1 0

    read rs1 REGISTERS arg2

    op xor result rs1 arg3
    write result REGISTERS arg1

    jump end_instruction always

ORI:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    jump end_instruction equal arg1 0

    read rs1 REGISTERS arg2

    op or result rs1 arg3
    write result REGISTERS arg1

    jump end_instruction always

ANDI:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    jump end_instruction equal arg1 0

    read rs1 REGISTERS arg2

    op and result rs1 arg3
    write result REGISTERS arg1

    jump end_instruction always

SLLI:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    jump end_instruction equal arg1 0

    read rs1 REGISTERS arg2

    # truncate before shifting to avoid overflowing 52 integer bits in double
    op sub length 32 arg3
    op pow divisor 2 length
    op mod rs1 rs1 divisor

    op shl result rs1 arg3
    write result REGISTERS arg1

    jump end_instruction always

SRLI:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    jump end_instruction equal arg1 0

    read rs1 REGISTERS arg2

    op shr result rs1 arg3
    write result REGISTERS arg1

    jump end_instruction always

SRAI:
    # I-type: arg1=rd, arg2=rs1, arg3=imm
    jump end_instruction equal arg1 0

    read rs1 REGISTERS arg2

    op shr value rs1 arg3

    op sub length 32 arg3
    op add ret @counter 1
    jump extend_sign always

    write result REGISTERS arg1

    jump end_instruction always

# most of the register-register instructions are identical to their register-immediate counterparts
# so just set imm to rs2 and reuse the existing logic

ADD:
    # R-type: arg1=rd, arg2=rs1, arg3=rs2
    read arg3 REGISTERS arg3
    jump ADDI always

SUB:
    # R-type: arg1=rd, arg2=rs1, arg3=rs2
    read arg3 REGISTERS arg3

    # apply two's complement to negate the value in rs2 and put it into imm
    op sub arg3 0x100000000 arg3
    op mod arg3 arg3 0x100000000

    jump ADDI always

SLL:
    # R-type: arg1=rd, arg2=rs1, arg3=rs2
    read arg3 REGISTERS arg3
    op mod arg3 arg3 32 # 2^5 (trunc 5)
    jump SLLI always

SLT:
    # R-type: arg1=rd, arg2=rs1, arg3=rs2
    read arg3 REGISTERS arg3
    jump SLTI always

SLTU:
    # R-type: arg1=rd, arg2=rs1, arg3=rs2
    read arg3 REGISTERS arg3
    jump SLTIU always

XOR:
    # R-type: arg1=rd, arg2=rs1, arg3=rs2
    read arg3 REGISTERS arg3
    jump XORI always

SRL:
    # R-type: arg1=rd, arg2=rs1, arg3=rs2
    read arg3 REGISTERS arg3
    op mod arg3 arg3 32 # 2^5 (trunc 5)
    jump SRLI always

SRA:
    # R-type: arg1=rd, arg2=rs1, arg3=rs2
    read arg3 REGISTERS arg3
    op mod arg3 arg3 32 # 2^5 (trunc 5)
    jump SRAI always

OR:
    # R-type: arg1=rd, arg2=rs1, arg3=rs2
    read arg3 REGISTERS arg3
    jump ORI always

AND:
    # R-type: arg1=rd, arg2=rs1, arg3=rs2
    read arg3 REGISTERS arg3
    jump ANDI always

FENCE:
    # I-type: arg1=rd, arg2=rs1, arg3=imm

    # PAUSE
    # TODO: there's probably a better way to do this
    jump FENCE__not_pause notEqual arg1 0
    jump FENCE__not_pause notEqual arg2 0
    jump FENCE__not_pause notEqual arg3 0b000000010000

    wait 0.00001

FENCE__not_pause:
    # no-op
    jump end_instruction always

ECALL:
    read a0 REGISTERS 10
    read a1 REGISTERS 11
    read a2 REGISTERS 12
    read a3 REGISTERS 13
    read a4 REGISTERS 14
    read a5 REGISTERS 15
    read a7 REGISTERS 17

    jump illegal_syscall lessThan a7 0 # this SHOULD never happen, but just in case
    jump illegal_syscall greaterThanEq a7 20 # number of syscalls

    op add @counter @counter a7
    
    jump ECALL_halt always
    jump ECALL_printchar always
    jump ECALL_printflush always
    jump ECALL_draw_clear always
    jump ECALL_draw_color always
    jump ECALL_draw_col always
    jump ECALL_draw_stroke always
    jump ECALL_draw_line always
    jump ECALL_draw_rect always
    jump ECALL_draw_lineRect always
    jump ECALL_draw_poly always
    jump ECALL_draw_linePoly always
    jump ECALL_draw_triangle always
    jump ECALL_draw_image always
    jump ECALL_draw_print always
    jump ECALL_draw_translate always
    jump ECALL_draw_scale always
    jump ECALL_draw_rotate always
    jump ECALL_draw_reset always
    jump ECALL_drawflush always

ECALL_halt:
    set exit_code a0
    jump halt always

ECALL_printchar:
    printchar a0
    jump end_instruction_preserve_instret always

ECALL_printflush:
    printflush ERROR_OUTPUT
    jump end_instruction_preserve_instret always

ECALL_draw_clear:
    draw clear a0 a1 a2
    jump end_instruction_preserve_instret always

ECALL_draw_color:
    draw color a0 a1 a2 a3
    jump end_instruction_preserve_instret always

ECALL_draw_col:
    op mul a0 a0 %00000001
    draw col a0
    jump end_instruction_preserve_instret always

ECALL_draw_stroke:
    draw stroke a0
    jump end_instruction_preserve_instret always

ECALL_draw_line:
    draw line a0 a1 a2 a3
    jump end_instruction_preserve_instret always

ECALL_draw_rect:
    draw rect a0 a1 a2 a3
    jump end_instruction_preserve_instret always

ECALL_draw_lineRect:
    draw lineRect a0 a1 a2 a3
    jump end_instruction_preserve_instret always

ECALL_draw_poly:
    draw poly a0 a1 a2 a3 a4
    jump end_instruction_preserve_instret always

ECALL_draw_linePoly:
    draw linePoly a0 a1 a2 a3 a4
    jump end_instruction_preserve_instret always

ECALL_draw_triangle:
    draw triangle a0 a1 a2 a3 a4 a5
    jump end_instruction_preserve_instret always

ECALL_draw_image:
    op mod a2 a2 4 # number of indices
    op mul a2 a2 2 # instructions per index
    op add @counter @counter a2

    lookup block image a3; jump ECALL_draw_image__end always
    lookup unit image a3; jump ECALL_draw_image__end always
    lookup item image a3; jump ECALL_draw_image__end always
    lookup liquid image a3; jump ECALL_draw_image__end always

ECALL_draw_image__end:
    jump ECALL_draw_image__lookup_fail strictEqual image null

    write 1 REGISTERS 10
    draw image a0 a1 image a4 a5
    jump end_instruction_preserve_instret always

ECALL_draw_image__lookup_fail:
    write 0 REGISTERS 10
    jump end_instruction_preserve_instret always

ECALL_draw_print:
    op mod a2 a2 9 # number of indices
    op mul a2 a2 2 # instructions per index
    op add @counter @counter a2

    draw print a0 a1 bottom; jump end_instruction_preserve_instret always
    draw print a0 a1 bottomLeft; jump end_instruction_preserve_instret always
    draw print a0 a1 bottomRight; jump end_instruction_preserve_instret always
    draw print a0 a1 center; jump end_instruction_preserve_instret always
    draw print a0 a1 left; jump end_instruction_preserve_instret always
    draw print a0 a1 right; jump end_instruction_preserve_instret always
    draw print a0 a1 top; jump end_instruction_preserve_instret always
    draw print a0 a1 topLeft; jump end_instruction_preserve_instret always
    draw print a0 a1 topRight; jump end_instruction_preserve_instret always

ECALL_draw_translate:
    draw translate a0 a1
    jump end_instruction_preserve_instret always

ECALL_draw_scale:
    draw scale a0 a1
    jump end_instruction_preserve_instret always

ECALL_draw_rotate:
    draw rotate a0
    jump end_instruction_preserve_instret always

ECALL_draw_reset:
    draw reset
    jump end_instruction_preserve_instret always

ECALL_drawflush:
    drawflush DISPLAY
    jump end_instruction_preserve_instret always

EBREAK:
    op add ret @counter 1
    jump update_time_and_cycle always

    control enabled PAUSE_SWITCH true
    print "Paused on EBREAK, disable pause switch to continue"
    printflush ERROR_OUTPUT

    set pause_tick @tick

EBREAK__loop:
    sensor reset_enabled RESET_SWITCH @enabled
    jump halt equal reset_enabled true
    sensor pause_enabled PAUSE_SWITCH @enabled
    jump EBREAK__loop equal pause_enabled true

    # move RESET_TICK forward by the amount of time we were paused for
    # this should have the effect of pausing cycle while paused here
    op sub delta @tick pause_tick
    op add RESET_TICK RESET_TICK delta

    op add ret @counter 1
    jump update_time_and_cycle always

    printflush ERROR_OUTPUT
    jump end_instruction_preserve_instret always

CSRRW:
    # CSR-type: arg1=rd, arg2=rs1, arg3=csr
    read rs1 REGISTERS arg2
CSRRW__no_read_rs1:

    set csr arg3
    op add ret @counter 1
    jump access_csr always

    # technically we're not supposed to perform this read, but it doesn't really make a difference
    read value CSRS variable

    jump illegal_instruction equal readonly true
    write rs1 CSRS variable

    jump end_instruction equal arg1 0
    write value REGISTERS arg1

    jump end_instruction always

CSRRS:
    # CSR-type: arg1=rd, arg2=rs1, arg3=csr
    read rs1 REGISTERS arg2
CSRRS__no_read_rs1:

    set csr arg3
    op add ret @counter 1
    jump access_csr always

    read value CSRS variable

    jump CSRRS__skip_write equal arg2 0
    jump illegal_instruction equal readonly true

    op or result rs1 value

    write result CSRS variable

CSRRS__skip_write:
    jump end_instruction equal arg1 0
    write value REGISTERS arg1

    jump end_instruction always

CSRRC:
    # CSR-type: arg1=rd, arg2=rs1, arg3=csr
    read rs1 REGISTERS arg2
CSRRC__no_read_rs1:

    set csr arg3
    op add ret @counter 1
    jump access_csr always

    read value CSRS variable

    jump CSRRC__skip_write equal arg2 0
    jump illegal_instruction equal readonly true

    op not result rs1
    op and result result value

    write result CSRS variable

CSRRC__skip_write:
    jump end_instruction equal arg1 0
    write value REGISTERS arg1

    jump end_instruction always

CSRRWI:
    # CSRI-type: arg1=rd, arg2=uimm, arg3=csr
    set rs1 arg2
    jump CSRRW__no_read_rs1 always

CSRRSI:
    # CSRI-type: arg1=rd, arg2=uimm, arg3=csr
    set rs1 arg2
    jump CSRRS__no_read_rs1 always

CSRRCI:
    # CSRI-type: arg1=rd, arg2=uimm, arg3=csr
    set rs1 arg2
    jump CSRRC__no_read_rs1 always
